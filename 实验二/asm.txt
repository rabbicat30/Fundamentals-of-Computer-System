
bomb:     file format elf32-i386


Disassembly of section .init:

080486f4 <_init>:
 80486f4:	53                   	push   %ebx
 80486f5:	83 ec 08             	sub    $0x8,%esp
 80486f8:	e8 13 02 00 00       	call   8048910 <__x86.get_pc_thunk.bx>
 80486fd:	81 c3 03 39 00 00    	add    $0x3903,%ebx
 8048703:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8048709:	85 c0                	test   %eax,%eax
 804870b:	74 05                	je     8048712 <_init+0x1e>
 804870d:	e8 be 01 00 00       	call   80488d0 <__sprintf_chk@plt+0x10>
 8048712:	83 c4 08             	add    $0x8,%esp
 8048715:	5b                   	pop    %ebx
 8048716:	c3                   	ret    

Disassembly of section .plt:

08048720 <read@plt-0x10>:
 8048720:	ff 35 04 c0 04 08    	pushl  0x804c004
 8048726:	ff 25 08 c0 04 08    	jmp    *0x804c008
 804872c:	00 00                	add    %al,(%eax)
	...

08048730 <read@plt>:
 8048730:	ff 25 0c c0 04 08    	jmp    *0x804c00c
 8048736:	68 00 00 00 00       	push   $0x0
 804873b:	e9 e0 ff ff ff       	jmp    8048720 <_init+0x2c>

08048740 <fflush@plt>:
 8048740:	ff 25 10 c0 04 08    	jmp    *0x804c010
 8048746:	68 08 00 00 00       	push   $0x8
 804874b:	e9 d0 ff ff ff       	jmp    8048720 <_init+0x2c>

08048750 <fgets@plt>:
 8048750:	ff 25 14 c0 04 08    	jmp    *0x804c014
 8048756:	68 10 00 00 00       	push   $0x10
 804875b:	e9 c0 ff ff ff       	jmp    8048720 <_init+0x2c>

08048760 <signal@plt>:
 8048760:	ff 25 18 c0 04 08    	jmp    *0x804c018
 8048766:	68 18 00 00 00       	push   $0x18
 804876b:	e9 b0 ff ff ff       	jmp    8048720 <_init+0x2c>

08048770 <sleep@plt>:
 8048770:	ff 25 1c c0 04 08    	jmp    *0x804c01c
 8048776:	68 20 00 00 00       	push   $0x20
 804877b:	e9 a0 ff ff ff       	jmp    8048720 <_init+0x2c>

08048780 <alarm@plt>:
 8048780:	ff 25 20 c0 04 08    	jmp    *0x804c020
 8048786:	68 28 00 00 00       	push   $0x28
 804878b:	e9 90 ff ff ff       	jmp    8048720 <_init+0x2c>

08048790 <__stack_chk_fail@plt>:
 8048790:	ff 25 24 c0 04 08    	jmp    *0x804c024
 8048796:	68 30 00 00 00       	push   $0x30
 804879b:	e9 80 ff ff ff       	jmp    8048720 <_init+0x2c>

080487a0 <strcpy@plt>:
 80487a0:	ff 25 28 c0 04 08    	jmp    *0x804c028
 80487a6:	68 38 00 00 00       	push   $0x38
 80487ab:	e9 70 ff ff ff       	jmp    8048720 <_init+0x2c>

080487b0 <getenv@plt>:
 80487b0:	ff 25 2c c0 04 08    	jmp    *0x804c02c
 80487b6:	68 40 00 00 00       	push   $0x40
 80487bb:	e9 60 ff ff ff       	jmp    8048720 <_init+0x2c>

080487c0 <puts@plt>:
 80487c0:	ff 25 30 c0 04 08    	jmp    *0x804c030
 80487c6:	68 48 00 00 00       	push   $0x48
 80487cb:	e9 50 ff ff ff       	jmp    8048720 <_init+0x2c>

080487d0 <__memmove_chk@plt>:
 80487d0:	ff 25 34 c0 04 08    	jmp    *0x804c034
 80487d6:	68 50 00 00 00       	push   $0x50
 80487db:	e9 40 ff ff ff       	jmp    8048720 <_init+0x2c>

080487e0 <exit@plt>:
 80487e0:	ff 25 38 c0 04 08    	jmp    *0x804c038
 80487e6:	68 58 00 00 00       	push   $0x58
 80487eb:	e9 30 ff ff ff       	jmp    8048720 <_init+0x2c>

080487f0 <__libc_start_main@plt>:
 80487f0:	ff 25 3c c0 04 08    	jmp    *0x804c03c
 80487f6:	68 60 00 00 00       	push   $0x60
 80487fb:	e9 20 ff ff ff       	jmp    8048720 <_init+0x2c>

08048800 <write@plt>:
 8048800:	ff 25 40 c0 04 08    	jmp    *0x804c040
 8048806:	68 68 00 00 00       	push   $0x68
 804880b:	e9 10 ff ff ff       	jmp    8048720 <_init+0x2c>

08048810 <__isoc99_sscanf@plt>:
 8048810:	ff 25 44 c0 04 08    	jmp    *0x804c044
 8048816:	68 70 00 00 00       	push   $0x70
 804881b:	e9 00 ff ff ff       	jmp    8048720 <_init+0x2c>

08048820 <fopen@plt>:
 8048820:	ff 25 48 c0 04 08    	jmp    *0x804c048
 8048826:	68 78 00 00 00       	push   $0x78
 804882b:	e9 f0 fe ff ff       	jmp    8048720 <_init+0x2c>

08048830 <__errno_location@plt>:
 8048830:	ff 25 4c c0 04 08    	jmp    *0x804c04c
 8048836:	68 80 00 00 00       	push   $0x80
 804883b:	e9 e0 fe ff ff       	jmp    8048720 <_init+0x2c>

08048840 <__printf_chk@plt>:
 8048840:	ff 25 50 c0 04 08    	jmp    *0x804c050
 8048846:	68 88 00 00 00       	push   $0x88
 804884b:	e9 d0 fe ff ff       	jmp    8048720 <_init+0x2c>

08048850 <socket@plt>:
 8048850:	ff 25 54 c0 04 08    	jmp    *0x804c054
 8048856:	68 90 00 00 00       	push   $0x90
 804885b:	e9 c0 fe ff ff       	jmp    8048720 <_init+0x2c>

08048860 <__fprintf_chk@plt>:
 8048860:	ff 25 58 c0 04 08    	jmp    *0x804c058
 8048866:	68 98 00 00 00       	push   $0x98
 804886b:	e9 b0 fe ff ff       	jmp    8048720 <_init+0x2c>

08048870 <gethostbyname@plt>:
 8048870:	ff 25 5c c0 04 08    	jmp    *0x804c05c
 8048876:	68 a0 00 00 00       	push   $0xa0
 804887b:	e9 a0 fe ff ff       	jmp    8048720 <_init+0x2c>

08048880 <strtol@plt>:
 8048880:	ff 25 60 c0 04 08    	jmp    *0x804c060
 8048886:	68 a8 00 00 00       	push   $0xa8
 804888b:	e9 90 fe ff ff       	jmp    8048720 <_init+0x2c>

08048890 <connect@plt>:
 8048890:	ff 25 64 c0 04 08    	jmp    *0x804c064
 8048896:	68 b0 00 00 00       	push   $0xb0
 804889b:	e9 80 fe ff ff       	jmp    8048720 <_init+0x2c>

080488a0 <close@plt>:
 80488a0:	ff 25 68 c0 04 08    	jmp    *0x804c068
 80488a6:	68 b8 00 00 00       	push   $0xb8
 80488ab:	e9 70 fe ff ff       	jmp    8048720 <_init+0x2c>

080488b0 <__ctype_b_loc@plt>:
 80488b0:	ff 25 6c c0 04 08    	jmp    *0x804c06c
 80488b6:	68 c0 00 00 00       	push   $0xc0
 80488bb:	e9 60 fe ff ff       	jmp    8048720 <_init+0x2c>

080488c0 <__sprintf_chk@plt>:
 80488c0:	ff 25 70 c0 04 08    	jmp    *0x804c070
 80488c6:	68 c8 00 00 00       	push   $0xc8
 80488cb:	e9 50 fe ff ff       	jmp    8048720 <_init+0x2c>

Disassembly of section .plt.got:

080488d0 <.plt.got>:
 80488d0:	ff 25 fc bf 04 08    	jmp    *0x804bffc
 80488d6:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

080488e0 <_start>:
 80488e0:	31 ed                	xor    %ebp,%ebp
 80488e2:	5e                   	pop    %esi
 80488e3:	89 e1                	mov    %esp,%ecx
 80488e5:	83 e4 f0             	and    $0xfffffff0,%esp
 80488e8:	50                   	push   %eax
 80488e9:	54                   	push   %esp
 80488ea:	52                   	push   %edx
 80488eb:	68 40 9e 04 08       	push   $0x8049e40
 80488f0:	68 e0 9d 04 08       	push   $0x8049de0
 80488f5:	51                   	push   %ecx
 80488f6:	56                   	push   %esi
 80488f7:	68 db 89 04 08       	push   $0x80489db
 80488fc:	e8 ef fe ff ff       	call   80487f0 <__libc_start_main@plt>
 8048901:	f4                   	hlt    
 8048902:	66 90                	xchg   %ax,%ax
 8048904:	66 90                	xchg   %ax,%ax
 8048906:	66 90                	xchg   %ax,%ax
 8048908:	66 90                	xchg   %ax,%ax
 804890a:	66 90                	xchg   %ax,%ax
 804890c:	66 90                	xchg   %ax,%ax
 804890e:	66 90                	xchg   %ax,%ax

08048910 <__x86.get_pc_thunk.bx>:
 8048910:	8b 1c 24             	mov    (%esp),%ebx
 8048913:	c3                   	ret    
 8048914:	66 90                	xchg   %ax,%ax
 8048916:	66 90                	xchg   %ax,%ax
 8048918:	66 90                	xchg   %ax,%ax
 804891a:	66 90                	xchg   %ax,%ax
 804891c:	66 90                	xchg   %ax,%ax
 804891e:	66 90                	xchg   %ax,%ax

08048920 <deregister_tm_clones>:
 8048920:	b8 a3 c3 04 08       	mov    $0x804c3a3,%eax
 8048925:	2d a0 c3 04 08       	sub    $0x804c3a0,%eax
 804892a:	83 f8 06             	cmp    $0x6,%eax
 804892d:	76 1a                	jbe    8048949 <deregister_tm_clones+0x29>
 804892f:	b8 00 00 00 00       	mov    $0x0,%eax
 8048934:	85 c0                	test   %eax,%eax
 8048936:	74 11                	je     8048949 <deregister_tm_clones+0x29>
 8048938:	55                   	push   %ebp
 8048939:	89 e5                	mov    %esp,%ebp
 804893b:	83 ec 14             	sub    $0x14,%esp
 804893e:	68 a0 c3 04 08       	push   $0x804c3a0
 8048943:	ff d0                	call   *%eax
 8048945:	83 c4 10             	add    $0x10,%esp
 8048948:	c9                   	leave  
 8048949:	f3 c3                	repz ret 
 804894b:	90                   	nop
 804894c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08048950 <register_tm_clones>:
 8048950:	b8 a0 c3 04 08       	mov    $0x804c3a0,%eax
 8048955:	2d a0 c3 04 08       	sub    $0x804c3a0,%eax
 804895a:	c1 f8 02             	sar    $0x2,%eax
 804895d:	89 c2                	mov    %eax,%edx
 804895f:	c1 ea 1f             	shr    $0x1f,%edx
 8048962:	01 d0                	add    %edx,%eax
 8048964:	d1 f8                	sar    %eax
 8048966:	74 1b                	je     8048983 <register_tm_clones+0x33>
 8048968:	ba 00 00 00 00       	mov    $0x0,%edx
 804896d:	85 d2                	test   %edx,%edx
 804896f:	74 12                	je     8048983 <register_tm_clones+0x33>
 8048971:	55                   	push   %ebp
 8048972:	89 e5                	mov    %esp,%ebp
 8048974:	83 ec 10             	sub    $0x10,%esp
 8048977:	50                   	push   %eax
 8048978:	68 a0 c3 04 08       	push   $0x804c3a0
 804897d:	ff d2                	call   *%edx
 804897f:	83 c4 10             	add    $0x10,%esp
 8048982:	c9                   	leave  
 8048983:	f3 c3                	repz ret 
 8048985:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8048989:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048990 <__do_global_dtors_aux>:
 8048990:	80 3d c8 c3 04 08 00 	cmpb   $0x0,0x804c3c8
 8048997:	75 13                	jne    80489ac <__do_global_dtors_aux+0x1c>
 8048999:	55                   	push   %ebp
 804899a:	89 e5                	mov    %esp,%ebp
 804899c:	83 ec 08             	sub    $0x8,%esp
 804899f:	e8 7c ff ff ff       	call   8048920 <deregister_tm_clones>
 80489a4:	c6 05 c8 c3 04 08 01 	movb   $0x1,0x804c3c8
 80489ab:	c9                   	leave  
 80489ac:	f3 c3                	repz ret 
 80489ae:	66 90                	xchg   %ax,%ax

080489b0 <frame_dummy>:
 80489b0:	b8 10 bf 04 08       	mov    $0x804bf10,%eax
 80489b5:	8b 10                	mov    (%eax),%edx
 80489b7:	85 d2                	test   %edx,%edx
 80489b9:	75 05                	jne    80489c0 <frame_dummy+0x10>
 80489bb:	eb 93                	jmp    8048950 <register_tm_clones>
 80489bd:	8d 76 00             	lea    0x0(%esi),%esi
 80489c0:	ba 00 00 00 00       	mov    $0x0,%edx
 80489c5:	85 d2                	test   %edx,%edx
 80489c7:	74 f2                	je     80489bb <frame_dummy+0xb>
 80489c9:	55                   	push   %ebp
 80489ca:	89 e5                	mov    %esp,%ebp
 80489cc:	83 ec 14             	sub    $0x14,%esp
 80489cf:	50                   	push   %eax
 80489d0:	ff d2                	call   *%edx
 80489d2:	83 c4 10             	add    $0x10,%esp
 80489d5:	c9                   	leave  
 80489d6:	e9 75 ff ff ff       	jmp    8048950 <register_tm_clones>

080489db <main>:
 80489db:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 80489df:	83 e4 f0             	and    $0xfffffff0,%esp
 80489e2:	ff 71 fc             	pushl  -0x4(%ecx)
 80489e5:	55                   	push   %ebp
 80489e6:	89 e5                	mov    %esp,%ebp
 80489e8:	53                   	push   %ebx
 80489e9:	51                   	push   %ecx
 80489ea:	8b 01                	mov    (%ecx),%eax
 80489ec:	8b 59 04             	mov    0x4(%ecx),%ebx
 80489ef:	83 f8 01             	cmp    $0x1,%eax
 80489f2:	75 0c                	jne    8048a00 <main+0x25>
 80489f4:	a1 c0 c3 04 08       	mov    0x804c3c0,%eax
 80489f9:	a3 d0 c3 04 08       	mov    %eax,0x804c3d0
 80489fe:	eb 5b                	jmp    8048a5b <main+0x80>
 8048a00:	83 f8 02             	cmp    $0x2,%eax
 8048a03:	75 39                	jne    8048a3e <main+0x63>
 8048a05:	83 ec 08             	sub    $0x8,%esp
 8048a08:	68 68 9e 04 08       	push   $0x8049e68
 8048a0d:	ff 73 04             	pushl  0x4(%ebx)
 8048a10:	e8 0b fe ff ff       	call   8048820 <fopen@plt>
 8048a15:	a3 d0 c3 04 08       	mov    %eax,0x804c3d0
 8048a1a:	83 c4 10             	add    $0x10,%esp
 8048a1d:	85 c0                	test   %eax,%eax
 8048a1f:	75 3a                	jne    8048a5b <main+0x80>
 8048a21:	ff 73 04             	pushl  0x4(%ebx)
 8048a24:	ff 33                	pushl  (%ebx)
 8048a26:	68 6a 9e 04 08       	push   $0x8049e6a
 8048a2b:	6a 01                	push   $0x1
 8048a2d:	e8 0e fe ff ff       	call   8048840 <__printf_chk@plt>
 8048a32:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 8048a39:	e8 a2 fd ff ff       	call   80487e0 <exit@plt>
 8048a3e:	83 ec 04             	sub    $0x4,%esp
 8048a41:	ff 33                	pushl  (%ebx)
 8048a43:	68 87 9e 04 08       	push   $0x8049e87
 8048a48:	6a 01                	push   $0x1
 8048a4a:	e8 f1 fd ff ff       	call   8048840 <__printf_chk@plt>
 8048a4f:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 8048a56:	e8 85 fd ff ff       	call   80487e0 <exit@plt>
 8048a5b:	e8 ae 05 00 00       	call   804900e <initialize_bomb>
 8048a60:	83 ec 0c             	sub    $0xc,%esp
 8048a63:	68 ec 9e 04 08       	push   $0x8049eec
 8048a68:	e8 53 fd ff ff       	call   80487c0 <puts@plt>
 8048a6d:	c7 04 24 28 9f 04 08 	movl   $0x8049f28,(%esp)
 8048a74:	e8 47 fd ff ff       	call   80487c0 <puts@plt>
 8048a79:	e8 82 06 00 00       	call   8049100 <read_line>
 8048a7e:	89 04 24             	mov    %eax,(%esp)
 8048a81:	e8 ad 00 00 00       	call   8048b33 <phase_1>
 8048a86:	e8 6e 07 00 00       	call   80491f9 <phase_defused>
 8048a8b:	c7 04 24 54 9f 04 08 	movl   $0x8049f54,(%esp)
 8048a92:	e8 29 fd ff ff       	call   80487c0 <puts@plt>
 8048a97:	e8 64 06 00 00       	call   8049100 <read_line>
 8048a9c:	89 04 24             	mov    %eax,(%esp)
 8048a9f:	e8 b0 00 00 00       	call   8048b54 <phase_2>
 8048aa4:	e8 50 07 00 00       	call   80491f9 <phase_defused>
 8048aa9:	c7 04 24 a1 9e 04 08 	movl   $0x8049ea1,(%esp)
 8048ab0:	e8 0b fd ff ff       	call   80487c0 <puts@plt>
 8048ab5:	e8 46 06 00 00       	call   8049100 <read_line>
 8048aba:	89 04 24             	mov    %eax,(%esp)
 8048abd:	e8 fd 00 00 00       	call   8048bbf <phase_3>
 8048ac2:	e8 32 07 00 00       	call   80491f9 <phase_defused>
 8048ac7:	c7 04 24 bf 9e 04 08 	movl   $0x8049ebf,(%esp)
 8048ace:	e8 ed fc ff ff       	call   80487c0 <puts@plt>
 8048ad3:	e8 28 06 00 00       	call   8049100 <read_line>
 8048ad8:	89 04 24             	mov    %eax,(%esp)
 8048adb:	e8 e1 01 00 00       	call   8048cc1 <phase_4>
 8048ae0:	e8 14 07 00 00       	call   80491f9 <phase_defused>
 8048ae5:	c7 04 24 80 9f 04 08 	movl   $0x8049f80,(%esp)
 8048aec:	e8 cf fc ff ff       	call   80487c0 <puts@plt>
 8048af1:	e8 0a 06 00 00       	call   8049100 <read_line>
 8048af6:	89 04 24             	mov    %eax,(%esp)
 8048af9:	e8 38 02 00 00       	call   8048d36 <phase_5>
 8048afe:	e8 f6 06 00 00       	call   80491f9 <phase_defused>
 8048b03:	c7 04 24 ce 9e 04 08 	movl   $0x8049ece,(%esp)
 8048b0a:	e8 b1 fc ff ff       	call   80487c0 <puts@plt>
 8048b0f:	e8 ec 05 00 00       	call   8049100 <read_line>
 8048b14:	89 04 24             	mov    %eax,(%esp)
 8048b17:	e8 62 02 00 00       	call   8048d7e <phase_6>
 8048b1c:	e8 d8 06 00 00       	call   80491f9 <phase_defused>
 8048b21:	83 c4 10             	add    $0x10,%esp
 8048b24:	b8 00 00 00 00       	mov    $0x0,%eax
 8048b29:	8d 65 f8             	lea    -0x8(%ebp),%esp
 8048b2c:	59                   	pop    %ecx
 8048b2d:	5b                   	pop    %ebx
 8048b2e:	5d                   	pop    %ebp
 8048b2f:	8d 61 fc             	lea    -0x4(%ecx),%esp
 8048b32:	c3                   	ret    

08048b33 <phase_1>:
 8048b33:	83 ec 14             	sub    $0x14,%esp
 8048b36:	68 a4 9f 04 08       	push   $0x8049fa4
 8048b3b:	ff 74 24 1c          	pushl  0x1c(%esp)
 8048b3f:	e8 65 04 00 00       	call   8048fa9 <strings_not_equal>
 8048b44:	83 c4 10             	add    $0x10,%esp
 8048b47:	85 c0                	test   %eax,%eax
 8048b49:	74 05                	je     8048b50 <phase_1+0x1d>
 8048b4b:	e8 50 05 00 00       	call   80490a0 <explode_bomb>
 8048b50:	83 c4 0c             	add    $0xc,%esp
 8048b53:	c3                   	ret    

08048b54 <phase_2>:
 8048b54:	56                   	push   %esi		//并没有讲ebp旧值入栈！！！
 8048b55:	53                   	push   %ebx
 8048b56:	83 ec 2c             	sub    $0x2c,%esp
 8048b59:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048b5f:	89 44 24 24          	mov    %eax,0x24(%esp)
 8048b63:	31 c0                	xor    %eax,%eax
 8048b65:	8d 44 24 0c          	lea    0xc(%esp),%eax
 8048b69:	50                   	push   %eax
 8048b6a:	ff 74 24 3c          	pushl  0x3c(%esp)				//这里入栈的是0x8048c30（猜测是输入字符串的首地址），在上一步完成的基础上，eap先减四，在+0x3c，
 8048b6e:	e8 52 05 00 00       	call   80490c5 <read_six_numbers>//输入六个数字
 8048b73:	83 c4 10             	add    $0x10,%esp
 8048b76:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)			//输入的第一个参数，执行完read之后，输入的数字入栈了
 8048b7b:	75 07                	jne    8048b84 <phase_2+0x30>
 8048b7d:	83 7c 24 08 01       	cmpl   $0x1,0x8(%esp)
 8048b82:	74 05                	je     8048b89 <phase_2+0x35>
 8048b84:	e8 17 05 00 00       	call   80490a0 <explode_bomb>
 8048b89:	8d 5c 24 04          	lea    0x4(%esp),%ebx			//ebx<-&A[0]
 8048b8d:	8d 74 24 14          	lea    0x14(%esp),%esi			//esi<-&A[4]
 8048b91:	8b 43 04             	mov    0x4(%ebx),%eax			//eax<-A[1]			eax<-A[4]
 8048b94:	03 03                	add    (%ebx),%eax				//eax<-A[0]+A[1]	eax<-A[3]+A[4]
 8048b96:	39 43 08             	cmp    %eax,0x8(%ebx)			
 8048b99:	74 05                	je     8048ba0 <phase_2+0x4c>		//A[2]==A[0]+A[1]	A[5]==A[3]+A[4]
 8048b9b:	e8 00 05 00 00       	call   80490a0 <explode_bomb>
 8048ba0:	83 c3 04             	add    $0x4,%ebx				//ebx<-&A[1]		ebx<-&A[3]
 8048ba3:	39 f3                	cmp    %esi,%ebx				//ebx==&A[4]  跳出循环
 8048ba5:	75 ea                	jne    8048b91 <phase_2+0x3d>
 8048ba7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8048bab:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8048bb2:	74 05                	je     8048bb9 <phase_2+0x65>
 8048bb4:	e8 d7 fb ff ff       	call   8048790 <__stack_chk_fail@plt>
 8048bb9:	83 c4 24             	add    $0x24,%esp
 8048bbc:	5b                   	pop    %ebx
 8048bbd:	5e                   	pop    %esi
 8048bbe:	c3                   	ret    

08048bbf <phase_3>:
 8048bbf:	83 ec 1c             	sub    $0x1c,%esp						//ebp未入栈
 8048bc2:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048bc8:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8048bcc:	31 c0                	xor    %eax,%eax
 8048bce:	8d 44 24 08          	lea    0x8(%esp),%eax
 8048bd2:	50                   	push   %eax
 8048bd3:	8d 44 24 08          	lea    0x8(%esp),%eax
 8048bd7:	50                   	push   %eax
 8048bd8:	68 6f a1 04 08       	push   $0x804a16f						//立即数0x804a16f入栈
 8048bdd:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048be1:	e8 2a fc ff ff       	call   8048810 <__isoc99_sscanf@plt>	//eax<-输入的参数的个数(sscanf函数的返回值)
 8048be6:	83 c4 10             	add    $0x10,%esp
 8048be9:	83 f8 01             	cmp    $0x1,%eax						//输入的个数必须大于1
 8048bec:	7f 05                	jg     8048bf3 <phase_3+0x34>
 8048bee:	e8 ad 04 00 00       	call   80490a0 <explode_bomb>
 8048bf3:	83 7c 24 04 07       	cmpl   $0x7,0x4(%esp)				
 8048bf8:	77 3c                	ja     8048c36 <phase_3+0x77>			//op<=7
 8048bfa:	8b 44 24 04          	mov    0x4(%esp),%eax
 8048bfe:	ff 24 85 00 a0 04 08 	jmp    *0x804a000(,%eax,4)				//如果op==0，跳转到8048c42
 8048c05:	b8 40 01 00 00       	mov    $0x140,%eax
 8048c0a:	eb 3b                	jmp    8048c47 <phase_3+0x88>
 8048c0c:	b8 d5 01 00 00       	mov    $0x1d5,%eax
 8048c11:	eb 34                	jmp    8048c47 <phase_3+0x88>
 8048c13:	b8 96 01 00 00       	mov    $0x196,%eax
 8048c18:	eb 2d                	jmp    8048c47 <phase_3+0x88>
 8048c1a:	b8 6a 03 00 00       	mov    $0x36a,%eax
 8048c1f:	eb 26                	jmp    8048c47 <phase_3+0x88>
 8048c21:	b8 d9 00 00 00       	mov    $0xd9,%eax
 8048c26:	eb 1f                	jmp    8048c47 <phase_3+0x88>
 8048c28:	b8 2a 01 00 00       	mov    $0x12a,%eax
 8048c2d:	eb 18                	jmp    8048c47 <phase_3+0x88>
 8048c2f:	b8 45 03 00 00       	mov    $0x345,%eax
 8048c34:	eb 11                	jmp    8048c47 <phase_3+0x88>
 8048c36:	e8 65 04 00 00       	call   80490a0 <explode_bomb>
 8048c3b:	b8 00 00 00 00       	mov    $0x0,%eax
 8048c40:	eb 05                	jmp    8048c47 <phase_3+0x88>
 8048c42:	b8 6a 01 00 00       	mov    $0x16a,%eax			
 8048c47:	3b 44 24 08          	cmp    0x8(%esp),%eax					//输入的第二个参数必须是0x16a
 8048c4b:	74 05                	je     8048c52 <phase_3+0x93>
 8048c4d:	e8 4e 04 00 00       	call   80490a0 <explode_bomb>
 8048c52:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8048c56:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8048c5d:	74 05                	je     8048c64 <phase_3+0xa5>
 8048c5f:	e8 2c fb ff ff       	call   8048790 <__stack_chk_fail@plt>
 8048c64:	83 c4 1c             	add    $0x1c,%esp
 8048c67:	c3                   	ret    

08048c68 <func4>:												//假设func的函数原型为func4(int b, int a, int al)对应  第一个参数，0x0，0xe
 8048c68:	56                   	push   %esi
 8048c69:	53                   	push   %ebx
 8048c6a:	83 ec 04             	sub    $0x4,%esp
 8048c6d:	8b 54 24 10          	mov    0x10(%esp),%edx		//edx<-b  ,edx<-第一个参数
 8048c71:	8b 74 24 14          	mov    0x14(%esp),%esi		//esi<-a  ,esi<-0x0
 8048c75:	8b 4c 24 18          	mov    0x18(%esp),%ecx		//ecx<-al ,y=R[ecx]
 8048c79:	89 c8                	mov    %ecx,%eax			//eax<-y
 8048c7b:	29 f0                	sub    %esi,%eax			//y=y-a
 8048c7d:	89 c3                	mov    %eax,%ebx			//ebx<-al-a;x=R[ebx];x=y
 8048c7f:	c1 eb 1f             	shr    $0x1f,%ebx			//shr逻辑右移，无符号运算，x=x>>(unsigned)0x1f
 8048c82:	01 d8                	add    %ebx,%eax			//y=y+x
 8048c84:	d1 f8                	sar    %eax					//y=y/2
 8048c86:	8d 1c 30             	lea    (%eax,%esi,1),%ebx	//x=y+a
 8048c89:	39 d3                	cmp    %edx,%ebx			
 8048c8b:	7e 15                	jle    8048ca2 <func4+0x3a>		//if x<=b
 8048c8d:	83 ec 04             	sub    $0x4,%esp				//else
 8048c90:	8d 43 ff             	lea    -0x1(%ebx),%eax				//y=x-1
 8048c93:	50                   	push   %eax
 8048c94:	56                   	push   %esi
 8048c95:	52                   	push   %edx
 8048c96:	e8 cd ff ff ff       	call   8048c68 <func4>				//y=func4(b, a, y)
 8048c9b:	83 c4 10             	add    $0x10,%esp
 8048c9e:	01 d8                	add    %ebx,%eax					//y=y+x
 8048ca0:	eb 19                	jmp    8048cbb <func4+0x53>			//return y
 8048ca2:	89 d8                	mov    %ebx,%eax				//if x<=b, y=x
 8048ca4:	39 d3                	cmp    %edx,%ebx			    	//if x>=b, return y
 8048ca6:	7d 13                	jge    8048cbb <func4+0x53>
 8048ca8:	83 ec 04             	sub    $0x4,%esp					//else
 8048cab:	51                   	push   %ecx							
 8048cac:	8d 43 01             	lea    0x1(%ebx),%eax					//y=y+1
 8048caf:	50                   	push   %eax
 8048cb0:	52                   	push   %edx
 8048cb1:	e8 b2 ff ff ff       	call   8048c68 <func4>					//return func4(b, y, al)
 8048cb6:	83 c4 10             	add    $0x10,%esp
 8048cb9:	01 d8                	add    %ebx,%eax
 8048cbb:	83 c4 04             	add    $0x4,%esp
 8048cbe:	5b                   	pop    %ebx
 8048cbf:	5e                   	pop    %esi
 8048cc0:	c3                   	ret    

08048cc1 <phase_4>:
 8048cc1:	83 ec 1c             	sub    $0x1c,%esp
 8048cc4:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048cca:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8048cce:	31 c0                	xor    %eax,%eax
 8048cd0:	8d 44 24 08          	lea    0x8(%esp),%eax
 8048cd4:	50                   	push   %eax
 8048cd5:	8d 44 24 08          	lea    0x8(%esp),%eax
 8048cd9:	50                   	push   %eax
 8048cda:	68 6f a1 04 08       	push   $0x804a16f
 8048cdf:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048ce3:	e8 28 fb ff ff       	call   8048810 <__isoc99_sscanf@plt>
 8048ce8:	83 c4 10             	add    $0x10,%esp
 8048ceb:	83 f8 02             	cmp    $0x2,%eax				//输入的参数的个数必须为2个
 8048cee:	75 07                	jne    8048cf7 <phase_4+0x36>
 8048cf0:	83 7c 24 04 0e       	cmpl   $0xe,0x4(%esp)			//第一个参数必须小于等于13
 8048cf5:	76 05                	jbe    8048cfc <phase_4+0x3b>
 8048cf7:	e8 a4 03 00 00       	call   80490a0 <explode_bomb>
 8048cfc:	83 ec 04             	sub    $0x4,%esp
 8048cff:	6a 0e                	push   $0xe
 8048d01:	6a 00                	push   $0x0
 8048d03:	ff 74 24 10          	pushl  0x10(%esp)				//输入的第一个参数入栈
 8048d07:	e8 5c ff ff ff       	call   8048c68 <func4>			//func的函数原型是func(int x,0xe,0x0)
 8048d0c:	83 c4 10             	add    $0x10,%esp
 8048d0f:	83 f8 0d             	cmp    $0xd,%eax				//调用func4的返回结果必须是13
 8048d12:	75 07                	jne    8048d1b <phase_4+0x5a>
 8048d14:	83 7c 24 08 0d       	cmpl   $0xd,0x8(%esp)			//输入的第二个参数必须是13(调试之后发现，从esp位置开始向上分别为0xe，0x2，0xd)
 8048d19:	74 05                	je     8048d20 <phase_4+0x5f>
 8048d1b:	e8 80 03 00 00       	call   80490a0 <explode_bomb>
 8048d20:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8048d24:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8048d2b:	74 05                	je     8048d32 <phase_4+0x71>
 8048d2d:	e8 5e fa ff ff       	call   8048790 <__stack_chk_fail@plt>
 8048d32:	83 c4 1c             	add    $0x1c,%esp
 8048d35:	c3                   	ret    

08048d36 <phase_5>:
 8048d36:	53                   	push   %ebx
 8048d37:	83 ec 14             	sub    $0x14,%esp
 8048d3a:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx				//ebx获得的是输入字符串的首址
 8048d3e:	53                   	push   %ebx
 8048d3f:	e8 46 02 00 00       	call   8048f8a <string_length>
 8048d44:	83 c4 10             	add    $0x10,%esp
 8048d47:	83 f8 06             	cmp    $0x6,%eax
 8048d4a:	74 05                	je     8048d51 <phase_5+0x1b>		//输入为6个字符
 8048d4c:	e8 4f 03 00 00       	call   80490a0 <explode_bomb>
 8048d51:	89 d8                	mov    %ebx,%eax					//eax<-&A[0]
 8048d53:	83 c3 06             	add    $0x6,%ebx					//ebx<-&A[0]+6
 8048d56:	b9 00 00 00 00       	mov    $0x0,%ecx					//ecx<-0
 8048d5b:	0f b6 10             	movzbl (%eax),%edx					//edx<-A[0]
 8048d5e:	83 e2 0f             	and    $0xf,%edx					//获得低四位，1<=R[edx]<=9，由char变为数字如‘1’，31H->1
 8048d61:	03 0c 95 20 a0 04 08 	add    0x804a020(,%edx,4),%ecx		//edx作为下标，将以0x804a020为首址的数组下标为R[edx]的数据给ecx
 8048d68:	83 c0 01             	add    $0x1,%eax					//eax指向下一个字符
 8048d6b:	39 d8                	cmp    %ebx,%eax					//未达到末尾
 8048d6d:	75 ec                	jne    8048d5b <phase_5+0x25>
 8048d6f:	83 f9 32             	cmp    $0x32,%ecx					//也就是输入的六个字符分别代表的以0x804a020为首址的数组的下标
 8048d72:	74 05                	je     8048d79 <phase_5+0x43>		//将该下标对应的六个数据相加，其和必须为0x32
 8048d74:	e8 27 03 00 00       	call   80490a0 <explode_bomb>
 8048d79:	83 c4 08             	add    $0x8,%esp
 8048d7c:	5b                   	pop    %ebx
 8048d7d:	c3                   	ret    

//记该结构体数组为
struct node{
	
}Node

08048d7e <phase_6>:														
 8048d7e:	56                   	push   %esi
 8048d7f:	53                   	push   %ebx
 8048d80:	83 ec 4c             	sub    $0x4c,%esp
 8048d83:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048d89:	89 44 24 44          	mov    %eax,0x44(%esp)
 8048d8d:	31 c0                	xor    %eax,%eax
 8048d8f:	8d 44 24 14          	lea    0x14(%esp),%eax
 8048d93:	50                   	push   %eax
 8048d94:	ff 74 24 5c          	pushl  0x5c(%esp)
 8048d98:	e8 28 03 00 00       	call   80490c5 <read_six_numbers>	//输入为6个数字
 8048d9d:	83 c4 10             	add    $0x10,%esp
 8048da0:	be 00 00 00 00       	mov    $0x0,%esi					//esi<-0；esi作为结构体数组的下标
 8048da5:	8b 44 b4 0c          	mov    0xc(%esp,%esi,4),%eax		//eax<-M[esp+4*esi+0xc]
 8048da9:	83 e8 01             	sub    $0x1,%eax					
 8048dac:	83 f8 05             	cmp    $0x5,%eax
 8048daf:	76 05                	jbe    8048db6 <phase_6+0x38>
 8048db1:	e8 ea 02 00 00       	call   80490a0 <explode_bomb>
 8048db6:	83 c6 01             	add    $0x1,%esi					
 8048db9:	83 fe 06             	cmp    $0x6,%esi
 8048dbc:	74 33                	je     8048df1 <phase_6+0x73>		//第一次执行肯定不等于，等于时结束双重循环，这个双重循环的目的是要求输入的六个数字必须均不相等
 8048dbe:	89 f3                	mov    %esi,%ebx					//ebx<-j(j初始为i+1)
 8048dc0:	8b 44 9c 0c          	mov    0xc(%esp,%ebx,4),%eax		//eax<-M[esp+i*4+0xc]
 8048dc4:	39 44 b4 08          	cmp    %eax,0x8(%esp,%esi,4)		//调试之后发现，M[esp+i*4+0xc]和M[esp+j*4+0x8]比较的是输入的六个数字，这六个数字被放在栈区连续的六个位置
 8048dc8:	75 05                	jne    8048dcf <phase_6+0x51>		
 8048dca:	e8 d1 02 00 00       	call   80490a0 <explode_bomb>
 8048dcf:	83 c3 01             	add    $0x1,%ebx
 8048dd2:	83 fb 05             	cmp    $0x5,%ebx
 8048dd5:	7e e9                	jle    8048dc0 <phase_6+0x42>
 8048dd7:	eb cc                	jmp    8048da5 <phase_6+0x27>
 8048dd9:	8b 52 08             	mov    0x8(%edx),%edx				//经过调试发现，赋值后edx的值为下一个结构体的首址
 8048ddc:	83 c0 01             	add    $0x1,%eax					//一直寻找到第ecx个节点，并将该节点的下一个节点的地址入栈
 8048ddf:	39 c8                	cmp    %ecx,%eax						
 8048de1:	75 f6                	jne    8048dd9 <phase_6+0x5b>
 8048de3:	89 54 b4 24          	mov    %edx,0x24(%esp,%esi,4)		
 8048de7:	83 c3 01             	add    $0x1,%ebx						
 8048dea:	83 fb 06             	cmp    $0x6,%ebx
 8048ded:	75 07                	jne    8048df6 <phase_6+0x78>
 8048def:	eb 1c                	jmp    8048e0d <phase_6+0x8f>
 8048df1:	bb 00 00 00 00       	mov    $0x0,%ebx					//初始化，ebx<-i，猜测这里应该是按照输入的数字的顺序，将节点一次连接起来（链表），在这个过程中有入栈，按照输入的链表的顺序将节点的地址值一次入栈
 8048df6:	89 de                	mov    %ebx,%esi					//esi<-j(j初始化为i)
 8048df8:	8b 4c 9c 0c          	mov    0xc(%esp,%ebx,4),%ecx		//ecx<-M[esp+4*j+0xc]，ecx的值即为输入的节点的value值
 8048dfc:	b8 01 00 00 00       	mov    $0x1,%eax					//eax<-1
 8048e01:	ba 3c c1 04 08       	mov    $0x804c13c,%edx				//edx<-0x804c13c，edx作为结构体数组的指针，指向第一个node
 8048e06:	83 f9 01             	cmp    $0x1,%ecx
 8048e09:	7f ce                	jg     8048dd9 <phase_6+0x5b>		
 8048e0b:	eb d6                	jmp    8048de3 <phase_6+0x65>
 8048e0d:	8b 5c 24 24          	mov    0x24(%esp),%ebx				//这一部分看不懂是在干什么
 8048e11:	8d 44 24 24          	lea    0x24(%esp),%eax
 8048e15:	8d 74 24 38          	lea    0x38(%esp),%esi
 8048e19:	89 d9                	mov    %ebx,%ecx
 8048e1b:	8b 50 04             	mov    0x4(%eax),%edx
 8048e1e:	89 51 08             	mov    %edx,0x8(%ecx)
 8048e21:	83 c0 04             	add    $0x4,%eax
 8048e24:	89 d1                	mov    %edx,%ecx
 8048e26:	39 f0                	cmp    %esi,%eax
 8048e28:	75 f1                	jne    8048e1b <phase_6+0x9d>
 8048e2a:	c7 42 08 00 00 00 00 	movl   $0x0,0x8(%edx)			
 8048e31:	be 05 00 00 00       	mov    $0x5,%esi
 8048e36:	8b 43 08             	mov    0x8(%ebx),%eax		//eax指向下一个节点
 8048e39:	8b 00                	mov    (%eax),%eax			//eax置为下一个节点的第一项的值
 8048e3b:	39 03                	cmp    %eax,(%ebx)			//ebx置为当前节点的第一项的值，这里需要当前节点的第一项比下一个节点的第一项大
 8048e3d:	7d 05                	jge    8048e44 <phase_6+0xc6>
 8048e3f:	e8 5c 02 00 00       	call   80490a0 <explode_bomb>
 8048e44:	8b 5b 08             	mov    0x8(%ebx),%ebx
 8048e47:	83 ee 01             	sub    $0x1,%esi
 8048e4a:	75 ea                	jne    8048e36 <phase_6+0xb8>
 8048e4c:	8b 44 24 3c          	mov    0x3c(%esp),%eax
 8048e50:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8048e57:	74 05                	je     8048e5e <phase_6+0xe0>
 8048e59:	e8 32 f9 ff ff       	call   8048790 <__stack_chk_fail@plt>
 8048e5e:	83 c4 44             	add    $0x44,%esp
 8048e61:	5b                   	pop    %ebx
 8048e62:	5e                   	pop    %esi
 8048e63:	c3                   	ret    

08048e64 <fun7>:
 8048e64:	53                   	push   %ebx
 8048e65:	83 ec 08             	sub    $0x8,%esp
 8048e68:	8b 54 24 10          	mov    0x10(%esp),%edx			//第一个参数：立即数0x804c088
 8048e6c:	8b 4c 24 14          	mov    0x14(%esp),%ecx			//第二个参数
 8048e70:	85 d2                	test   %edx,%edx
 8048e72:	74 37                	je     8048eab <fun7+0x47>		//根据返回结果，第一个参数不能为0
 8048e74:	8b 1a                	mov    (%edx),%ebx
 8048e76:	39 cb                	cmp    %ecx,%ebx
 8048e78:	7e 13                	jle    8048e8d <fun7+0x29>		//从这儿跳转到ecx==ebx处
 8048e7a:	83 ec 08             	sub    $0x8,%esp
 8048e7d:	51                   	push   %ecx
 8048e7e:	ff 72 04             	pushl  0x4(%edx)
 8048e81:	e8 de ff ff ff       	call   8048e64 <fun7>
 8048e86:	83 c4 10             	add    $0x10,%esp
 8048e89:	01 c0                	add    %eax,%eax
 8048e8b:	eb 23                	jmp    8048eb0 <fun7+0x4c>
 8048e8d:	b8 00 00 00 00       	mov    $0x0,%eax
 8048e92:	39 cb                	cmp    %ecx,%ebx					//最后一次递归ecx==ebx，使得返回的eax==0
 8048e94:	74 1a                	je     8048eb0 <fun7+0x4c>
 8048e96:	83 ec 08             	sub    $0x8,%esp
 8048e99:	51                   	push   %ecx
 8048e9a:	ff 72 08             	pushl  0x8(%edx)
 8048e9d:	e8 c2 ff ff ff       	call   8048e64 <fun7>				//这里执行最后一次递归，这时edx+8->edx,所以调用最后一次递归事这里满足M(edx+8)==R(ecx)
 8048ea2:	83 c4 10             	add    $0x10,%esp					//也就是（0x804c088+8))==(804c0a0)==0x32==ecx
 8048ea5:	8d 44 00 01          	lea    0x1(%eax,%eax,1),%eax		//因为最终的结果是eax为1，所以上一步应该是这里，也就是eax==0
 8048ea9:	eb 05                	jmp    8048eb0 <fun7+0x4c>
 8048eab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8048eb0:	83 c4 08             	add    $0x8,%esp
 8048eb3:	5b                   	pop    %ebx
 8048eb4:	c3                   	ret    

08048eb5 <secret_phase>:
 8048eb5:	53                   	push   %ebx
 8048eb6:	83 ec 08             	sub    $0x8,%esp
 8048eb9:	e8 42 02 00 00       	call   8049100 <read_line>
 8048ebe:	83 ec 04             	sub    $0x4,%esp
 8048ec1:	6a 0a                	push   $0xa
 8048ec3:	6a 00                	push   $0x0
 8048ec5:	50                   	push   %eax
 8048ec6:	e8 b5 f9 ff ff       	call   8048880 <strtol@plt>
 8048ecb:	89 c3                	mov    %eax,%ebx
 8048ecd:	8d 40 ff             	lea    -0x1(%eax),%eax
 8048ed0:	83 c4 10             	add    $0x10,%esp
 8048ed3:	3d e8 03 00 00       	cmp    $0x3e8,%eax
 8048ed8:	76 05                	jbe    8048edf <secret_phase+0x2a>
 8048eda:	e8 c1 01 00 00       	call   80490a0 <explode_bomb>
 8048edf:	83 ec 08             	sub    $0x8,%esp
 8048ee2:	53                   	push   %ebx								//逆递归解得ebx==0x32==50
 8048ee3:	68 88 c0 04 08       	push   $0x804c088
 8048ee8:	e8 77 ff ff ff       	call   8048e64 <fun7>
 8048eed:	83 c4 10             	add    $0x10,%esp
 8048ef0:	83 f8 01             	cmp    $0x1,%eax
 8048ef3:	74 05                	je     8048efa <secret_phase+0x45>		//func函数返回结果为1
 8048ef5:	e8 a6 01 00 00       	call   80490a0 <explode_bomb>
 8048efa:	83 ec 0c             	sub    $0xc,%esp
 8048efd:	68 d4 9f 04 08       	push   $0x8049fd4
 8048f02:	e8 b9 f8 ff ff       	call   80487c0 <puts@plt>
 8048f07:	e8 ed 02 00 00       	call   80491f9 <phase_defused>			//输出解密成功语句
 8048f0c:	83 c4 18             	add    $0x18,%esp
 8048f0f:	5b                   	pop    %ebx
 8048f10:	c3                   	ret    

08048f11 <sig_handler>:
 8048f11:	83 ec 18             	sub    $0x18,%esp
 8048f14:	68 60 a0 04 08       	push   $0x804a060
 8048f19:	e8 a2 f8 ff ff       	call   80487c0 <puts@plt>
 8048f1e:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
 8048f25:	e8 46 f8 ff ff       	call   8048770 <sleep@plt>
 8048f2a:	83 c4 08             	add    $0x8,%esp
 8048f2d:	68 22 a1 04 08       	push   $0x804a122
 8048f32:	6a 01                	push   $0x1
 8048f34:	e8 07 f9 ff ff       	call   8048840 <__printf_chk@plt>
 8048f39:	83 c4 04             	add    $0x4,%esp
 8048f3c:	ff 35 c4 c3 04 08    	pushl  0x804c3c4
 8048f42:	e8 f9 f7 ff ff       	call   8048740 <fflush@plt>
 8048f47:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8048f4e:	e8 1d f8 ff ff       	call   8048770 <sleep@plt>
 8048f53:	c7 04 24 2a a1 04 08 	movl   $0x804a12a,(%esp)
 8048f5a:	e8 61 f8 ff ff       	call   80487c0 <puts@plt>
 8048f5f:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
 8048f66:	e8 75 f8 ff ff       	call   80487e0 <exit@plt>

08048f6b <invalid_phase>:
 8048f6b:	83 ec 10             	sub    $0x10,%esp
 8048f6e:	ff 74 24 14          	pushl  0x14(%esp)
 8048f72:	68 32 a1 04 08       	push   $0x804a132
 8048f77:	6a 01                	push   $0x1
 8048f79:	e8 c2 f8 ff ff       	call   8048840 <__printf_chk@plt>
 8048f7e:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 8048f85:	e8 56 f8 ff ff       	call   80487e0 <exit@plt>

08048f8a <string_length>:
 8048f8a:	8b 54 24 04          	mov    0x4(%esp),%edx
 8048f8e:	80 3a 00             	cmpb   $0x0,(%edx)
 8048f91:	74 10                	je     8048fa3 <string_length+0x19>
 8048f93:	b8 00 00 00 00       	mov    $0x0,%eax
 8048f98:	83 c0 01             	add    $0x1,%eax
 8048f9b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
 8048f9f:	75 f7                	jne    8048f98 <string_length+0xe>
 8048fa1:	f3 c3                	repz ret 
 8048fa3:	b8 00 00 00 00       	mov    $0x0,%eax
 8048fa8:	c3                   	ret    

08048fa9 <strings_not_equal>:
 8048fa9:	57                   	push   %edi
 8048faa:	56                   	push   %esi
 8048fab:	53                   	push   %ebx
 8048fac:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 8048fb0:	8b 74 24 14          	mov    0x14(%esp),%esi
 8048fb4:	53                   	push   %ebx
 8048fb5:	e8 d0 ff ff ff       	call   8048f8a <string_length>
 8048fba:	89 c7                	mov    %eax,%edi
 8048fbc:	89 34 24             	mov    %esi,(%esp)
 8048fbf:	e8 c6 ff ff ff       	call   8048f8a <string_length>
 8048fc4:	83 c4 04             	add    $0x4,%esp
 8048fc7:	ba 01 00 00 00       	mov    $0x1,%edx
 8048fcc:	39 c7                	cmp    %eax,%edi
 8048fce:	75 38                	jne    8049008 <strings_not_equal+0x5f>
 8048fd0:	0f b6 03             	movzbl (%ebx),%eax
 8048fd3:	84 c0                	test   %al,%al
 8048fd5:	74 1e                	je     8048ff5 <strings_not_equal+0x4c>
 8048fd7:	3a 06                	cmp    (%esi),%al
 8048fd9:	74 06                	je     8048fe1 <strings_not_equal+0x38>
 8048fdb:	eb 1f                	jmp    8048ffc <strings_not_equal+0x53>
 8048fdd:	3a 06                	cmp    (%esi),%al
 8048fdf:	75 22                	jne    8049003 <strings_not_equal+0x5a>
 8048fe1:	83 c3 01             	add    $0x1,%ebx
 8048fe4:	83 c6 01             	add    $0x1,%esi
 8048fe7:	0f b6 03             	movzbl (%ebx),%eax
 8048fea:	84 c0                	test   %al,%al
 8048fec:	75 ef                	jne    8048fdd <strings_not_equal+0x34>
 8048fee:	ba 00 00 00 00       	mov    $0x0,%edx
 8048ff3:	eb 13                	jmp    8049008 <strings_not_equal+0x5f>
 8048ff5:	ba 00 00 00 00       	mov    $0x0,%edx
 8048ffa:	eb 0c                	jmp    8049008 <strings_not_equal+0x5f>
 8048ffc:	ba 01 00 00 00       	mov    $0x1,%edx
 8049001:	eb 05                	jmp    8049008 <strings_not_equal+0x5f>
 8049003:	ba 01 00 00 00       	mov    $0x1,%edx
 8049008:	89 d0                	mov    %edx,%eax
 804900a:	5b                   	pop    %ebx
 804900b:	5e                   	pop    %esi
 804900c:	5f                   	pop    %edi
 804900d:	c3                   	ret    

0804900e <initialize_bomb>:
 804900e:	83 ec 14             	sub    $0x14,%esp
 8049011:	68 11 8f 04 08       	push   $0x8048f11
 8049016:	6a 02                	push   $0x2
 8049018:	e8 43 f7 ff ff       	call   8048760 <signal@plt>
 804901d:	83 c4 1c             	add    $0x1c,%esp
 8049020:	c3                   	ret    

08049021 <initialize_bomb_solve>:
 8049021:	f3 c3                	repz ret 

08049023 <blank_line>:
 8049023:	56                   	push   %esi
 8049024:	53                   	push   %ebx
 8049025:	83 ec 04             	sub    $0x4,%esp
 8049028:	8b 74 24 10          	mov    0x10(%esp),%esi
 804902c:	eb 14                	jmp    8049042 <blank_line+0x1f>
 804902e:	e8 7d f8 ff ff       	call   80488b0 <__ctype_b_loc@plt>
 8049033:	83 c6 01             	add    $0x1,%esi
 8049036:	0f be db             	movsbl %bl,%ebx
 8049039:	8b 00                	mov    (%eax),%eax
 804903b:	f6 44 58 01 20       	testb  $0x20,0x1(%eax,%ebx,2)
 8049040:	74 0e                	je     8049050 <blank_line+0x2d>
 8049042:	0f b6 1e             	movzbl (%esi),%ebx
 8049045:	84 db                	test   %bl,%bl
 8049047:	75 e5                	jne    804902e <blank_line+0xb>
 8049049:	b8 01 00 00 00       	mov    $0x1,%eax
 804904e:	eb 05                	jmp    8049055 <blank_line+0x32>
 8049050:	b8 00 00 00 00       	mov    $0x0,%eax
 8049055:	83 c4 04             	add    $0x4,%esp
 8049058:	5b                   	pop    %ebx
 8049059:	5e                   	pop    %esi
 804905a:	c3                   	ret    

0804905b <skip>:
 804905b:	53                   	push   %ebx
 804905c:	83 ec 08             	sub    $0x8,%esp
 804905f:	83 ec 04             	sub    $0x4,%esp
 8049062:	ff 35 d0 c3 04 08    	pushl  0x804c3d0
 8049068:	6a 50                	push   $0x50
 804906a:	a1 cc c3 04 08       	mov    0x804c3cc,%eax
 804906f:	8d 04 80             	lea    (%eax,%eax,4),%eax
 8049072:	c1 e0 04             	shl    $0x4,%eax
 8049075:	05 e0 c3 04 08       	add    $0x804c3e0,%eax
 804907a:	50                   	push   %eax
 804907b:	e8 d0 f6 ff ff       	call   8048750 <fgets@plt>
 8049080:	89 c3                	mov    %eax,%ebx
 8049082:	83 c4 10             	add    $0x10,%esp
 8049085:	85 c0                	test   %eax,%eax
 8049087:	74 10                	je     8049099 <skip+0x3e>
 8049089:	83 ec 0c             	sub    $0xc,%esp
 804908c:	50                   	push   %eax
 804908d:	e8 91 ff ff ff       	call   8049023 <blank_line>
 8049092:	83 c4 10             	add    $0x10,%esp
 8049095:	85 c0                	test   %eax,%eax
 8049097:	75 c6                	jne    804905f <skip+0x4>
 8049099:	89 d8                	mov    %ebx,%eax
 804909b:	83 c4 08             	add    $0x8,%esp
 804909e:	5b                   	pop    %ebx
 804909f:	c3                   	ret    

080490a0 <explode_bomb>:
 80490a0:	83 ec 18             	sub    $0x18,%esp
 80490a3:	68 43 a1 04 08       	push   $0x804a143
 80490a8:	e8 13 f7 ff ff       	call   80487c0 <puts@plt>
 80490ad:	c7 04 24 4c a1 04 08 	movl   $0x804a14c,(%esp)
 80490b4:	e8 07 f7 ff ff       	call   80487c0 <puts@plt>
 80490b9:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 80490c0:	e8 1b f7 ff ff       	call   80487e0 <exit@plt>

080490c5 <read_six_numbers>:
 80490c5:	83 ec 0c             	sub    $0xc,%esp
 80490c8:	8b 44 24 14          	mov    0x14(%esp),%eax
 80490cc:	8d 50 14             	lea    0x14(%eax),%edx
 80490cf:	52                   	push   %edx
 80490d0:	8d 50 10             	lea    0x10(%eax),%edx
 80490d3:	52                   	push   %edx
 80490d4:	8d 50 0c             	lea    0xc(%eax),%edx
 80490d7:	52                   	push   %edx
 80490d8:	8d 50 08             	lea    0x8(%eax),%edx
 80490db:	52                   	push   %edx
 80490dc:	8d 50 04             	lea    0x4(%eax),%edx
 80490df:	52                   	push   %edx
 80490e0:	50                   	push   %eax
 80490e1:	68 63 a1 04 08       	push   $0x804a163
 80490e6:	ff 74 24 2c          	pushl  0x2c(%esp)
 80490ea:	e8 21 f7 ff ff       	call   8048810 <__isoc99_sscanf@plt>
 80490ef:	83 c4 20             	add    $0x20,%esp
 80490f2:	83 f8 05             	cmp    $0x5,%eax
 80490f5:	7f 05                	jg     80490fc <read_six_numbers+0x37>
 80490f7:	e8 a4 ff ff ff       	call   80490a0 <explode_bomb>
 80490fc:	83 c4 0c             	add    $0xc,%esp
 80490ff:	c3                   	ret    

08049100 <read_line>:
 8049100:	57                   	push   %edi
 8049101:	56                   	push   %esi
 8049102:	53                   	push   %ebx
 8049103:	e8 53 ff ff ff       	call   804905b <skip>
 8049108:	85 c0                	test   %eax,%eax
 804910a:	75 70                	jne    804917c <read_line+0x7c>
 804910c:	a1 c0 c3 04 08       	mov    0x804c3c0,%eax
 8049111:	39 05 d0 c3 04 08    	cmp    %eax,0x804c3d0
 8049117:	75 19                	jne    8049132 <read_line+0x32>
 8049119:	83 ec 0c             	sub    $0xc,%esp
 804911c:	68 75 a1 04 08       	push   $0x804a175
 8049121:	e8 9a f6 ff ff       	call   80487c0 <puts@plt>
 8049126:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 804912d:	e8 ae f6 ff ff       	call   80487e0 <exit@plt>
 8049132:	83 ec 0c             	sub    $0xc,%esp
 8049135:	68 93 a1 04 08       	push   $0x804a193
 804913a:	e8 71 f6 ff ff       	call   80487b0 <getenv@plt>
 804913f:	83 c4 10             	add    $0x10,%esp
 8049142:	85 c0                	test   %eax,%eax
 8049144:	74 0a                	je     8049150 <read_line+0x50>
 8049146:	83 ec 0c             	sub    $0xc,%esp
 8049149:	6a 00                	push   $0x0
 804914b:	e8 90 f6 ff ff       	call   80487e0 <exit@plt>
 8049150:	a1 c0 c3 04 08       	mov    0x804c3c0,%eax
 8049155:	a3 d0 c3 04 08       	mov    %eax,0x804c3d0
 804915a:	e8 fc fe ff ff       	call   804905b <skip>
 804915f:	85 c0                	test   %eax,%eax
 8049161:	75 19                	jne    804917c <read_line+0x7c>
 8049163:	83 ec 0c             	sub    $0xc,%esp
 8049166:	68 75 a1 04 08       	push   $0x804a175
 804916b:	e8 50 f6 ff ff       	call   80487c0 <puts@plt>
 8049170:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8049177:	e8 64 f6 ff ff       	call   80487e0 <exit@plt>
 804917c:	8b 15 cc c3 04 08    	mov    0x804c3cc,%edx
 8049182:	8d 1c 92             	lea    (%edx,%edx,4),%ebx
 8049185:	c1 e3 04             	shl    $0x4,%ebx
 8049188:	81 c3 e0 c3 04 08    	add    $0x804c3e0,%ebx
 804918e:	b8 00 00 00 00       	mov    $0x0,%eax
 8049193:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8049198:	89 df                	mov    %ebx,%edi
 804919a:	f2 ae                	repnz scas %es:(%edi),%al
 804919c:	f7 d1                	not    %ecx
 804919e:	83 e9 01             	sub    $0x1,%ecx
 80491a1:	83 f9 4e             	cmp    $0x4e,%ecx
 80491a4:	7e 36                	jle    80491dc <read_line+0xdc>
 80491a6:	83 ec 0c             	sub    $0xc,%esp
 80491a9:	68 9e a1 04 08       	push   $0x804a19e
 80491ae:	e8 0d f6 ff ff       	call   80487c0 <puts@plt>
 80491b3:	a1 cc c3 04 08       	mov    0x804c3cc,%eax
 80491b8:	8d 50 01             	lea    0x1(%eax),%edx
 80491bb:	89 15 cc c3 04 08    	mov    %edx,0x804c3cc
 80491c1:	6b c0 50             	imul   $0x50,%eax,%eax
 80491c4:	05 e0 c3 04 08       	add    $0x804c3e0,%eax
 80491c9:	be b9 a1 04 08       	mov    $0x804a1b9,%esi
 80491ce:	b9 04 00 00 00       	mov    $0x4,%ecx
 80491d3:	89 c7                	mov    %eax,%edi
 80491d5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
 80491d7:	e8 c4 fe ff ff       	call   80490a0 <explode_bomb>
 80491dc:	8d 04 92             	lea    (%edx,%edx,4),%eax
 80491df:	c1 e0 04             	shl    $0x4,%eax
 80491e2:	c6 84 01 df c3 04 08 	movb   $0x0,0x804c3df(%ecx,%eax,1)
 80491e9:	00 
 80491ea:	83 c2 01             	add    $0x1,%edx
 80491ed:	89 15 cc c3 04 08    	mov    %edx,0x804c3cc
 80491f3:	89 d8                	mov    %ebx,%eax
 80491f5:	5b                   	pop    %ebx
 80491f6:	5e                   	pop    %esi
 80491f7:	5f                   	pop    %edi
 80491f8:	c3                   	ret    

080491f9 <phase_defused>:
 80491f9:	83 ec 6c             	sub    $0x6c,%esp
 80491fc:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8049202:	89 44 24 5c          	mov    %eax,0x5c(%esp)
 8049206:	31 c0                	xor    %eax,%eax
 8049208:	83 3d cc c3 04 08 06 	cmpl   $0x6,0x804c3cc
 804920f:	75 73                	jne    8049284 <phase_defused+0x8b>
 8049211:	83 ec 0c             	sub    $0xc,%esp
 8049214:	8d 44 24 18          	lea    0x18(%esp),%eax
 8049218:	50                   	push   %eax
 8049219:	8d 44 24 18          	lea    0x18(%esp),%eax
 804921d:	50                   	push   %eax
 804921e:	8d 44 24 18          	lea    0x18(%esp),%eax
 8049222:	50                   	push   %eax
 8049223:	68 c9 a1 04 08       	push   $0x804a1c9
 8049228:	68 d0 c4 04 08       	push   $0x804c4d0
 804922d:	e8 de f5 ff ff       	call   8048810 <__isoc99_sscanf@plt>
 8049232:	83 c4 20             	add    $0x20,%esp
 8049235:	83 f8 03             	cmp    $0x3,%eax
 8049238:	75 3a                	jne    8049274 <phase_defused+0x7b>
 804923a:	83 ec 08             	sub    $0x8,%esp
 804923d:	68 d2 a1 04 08       	push   $0x804a1d2
 8049242:	8d 44 24 18          	lea    0x18(%esp),%eax
 8049246:	50                   	push   %eax
 8049247:	e8 5d fd ff ff       	call   8048fa9 <strings_not_equal>
 804924c:	83 c4 10             	add    $0x10,%esp
 804924f:	85 c0                	test   %eax,%eax
 8049251:	75 21                	jne    8049274 <phase_defused+0x7b>
 8049253:	83 ec 0c             	sub    $0xc,%esp
 8049256:	68 98 a0 04 08       	push   $0x804a098
 804925b:	e8 60 f5 ff ff       	call   80487c0 <puts@plt>
 8049260:	c7 04 24 c0 a0 04 08 	movl   $0x804a0c0,(%esp)
 8049267:	e8 54 f5 ff ff       	call   80487c0 <puts@plt>
 804926c:	e8 44 fc ff ff       	call   8048eb5 <secret_phase>
 8049271:	83 c4 10             	add    $0x10,%esp
 8049274:	83 ec 0c             	sub    $0xc,%esp
 8049277:	68 f8 a0 04 08       	push   $0x804a0f8
 804927c:	e8 3f f5 ff ff       	call   80487c0 <puts@plt>
 8049281:	83 c4 10             	add    $0x10,%esp
 8049284:	8b 44 24 5c          	mov    0x5c(%esp),%eax
 8049288:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 804928f:	74 05                	je     8049296 <phase_defused+0x9d>
 8049291:	e8 fa f4 ff ff       	call   8048790 <__stack_chk_fail@plt>
 8049296:	83 c4 6c             	add    $0x6c,%esp
 8049299:	c3                   	ret    

0804929a <sigalrm_handler>:
 804929a:	83 ec 0c             	sub    $0xc,%esp
 804929d:	6a 00                	push   $0x0
 804929f:	68 28 a2 04 08       	push   $0x804a228
 80492a4:	6a 01                	push   $0x1
 80492a6:	ff 35 a0 c3 04 08    	pushl  0x804c3a0
 80492ac:	e8 af f5 ff ff       	call   8048860 <__fprintf_chk@plt>
 80492b1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 80492b8:	e8 23 f5 ff ff       	call   80487e0 <exit@plt>

080492bd <rio_readlineb>:
 80492bd:	55                   	push   %ebp
 80492be:	57                   	push   %edi
 80492bf:	56                   	push   %esi
 80492c0:	53                   	push   %ebx
 80492c1:	83 ec 2c             	sub    $0x2c,%esp
 80492c4:	89 d7                	mov    %edx,%edi
 80492c6:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 80492ca:	65 8b 15 14 00 00 00 	mov    %gs:0x14,%edx
 80492d1:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 80492d5:	31 d2                	xor    %edx,%edx
 80492d7:	83 f9 01             	cmp    $0x1,%ecx
 80492da:	76 79                	jbe    8049355 <rio_readlineb+0x98>
 80492dc:	89 c3                	mov    %eax,%ebx
 80492de:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80492e2:	bd 01 00 00 00       	mov    $0x1,%ebp
 80492e7:	8d 73 0c             	lea    0xc(%ebx),%esi
 80492ea:	eb 2d                	jmp    8049319 <rio_readlineb+0x5c>
 80492ec:	83 ec 04             	sub    $0x4,%esp
 80492ef:	68 00 20 00 00       	push   $0x2000
 80492f4:	56                   	push   %esi
 80492f5:	ff 33                	pushl  (%ebx)
 80492f7:	e8 34 f4 ff ff       	call   8048730 <read@plt>
 80492fc:	89 43 04             	mov    %eax,0x4(%ebx)
 80492ff:	83 c4 10             	add    $0x10,%esp
 8049302:	85 c0                	test   %eax,%eax
 8049304:	79 0c                	jns    8049312 <rio_readlineb+0x55>
 8049306:	e8 25 f5 ff ff       	call   8048830 <__errno_location@plt>
 804930b:	83 38 04             	cmpl   $0x4,(%eax)
 804930e:	74 09                	je     8049319 <rio_readlineb+0x5c>
 8049310:	eb 62                	jmp    8049374 <rio_readlineb+0xb7>
 8049312:	85 c0                	test   %eax,%eax
 8049314:	74 63                	je     8049379 <rio_readlineb+0xbc>
 8049316:	89 73 08             	mov    %esi,0x8(%ebx)
 8049319:	8b 43 04             	mov    0x4(%ebx),%eax
 804931c:	85 c0                	test   %eax,%eax
 804931e:	7e cc                	jle    80492ec <rio_readlineb+0x2f>
 8049320:	8b 4b 08             	mov    0x8(%ebx),%ecx
 8049323:	0f b6 11             	movzbl (%ecx),%edx
 8049326:	88 54 24 1b          	mov    %dl,0x1b(%esp)
 804932a:	83 c1 01             	add    $0x1,%ecx
 804932d:	89 4b 08             	mov    %ecx,0x8(%ebx)
 8049330:	83 e8 01             	sub    $0x1,%eax
 8049333:	89 43 04             	mov    %eax,0x4(%ebx)
 8049336:	83 c7 01             	add    $0x1,%edi
 8049339:	88 57 ff             	mov    %dl,-0x1(%edi)
 804933c:	80 fa 0a             	cmp    $0xa,%dl
 804933f:	75 09                	jne    804934a <rio_readlineb+0x8d>
 8049341:	eb 1d                	jmp    8049360 <rio_readlineb+0xa3>
 8049343:	83 fd 01             	cmp    $0x1,%ebp
 8049346:	75 18                	jne    8049360 <rio_readlineb+0xa3>
 8049348:	eb 1b                	jmp    8049365 <rio_readlineb+0xa8>
 804934a:	83 c5 01             	add    $0x1,%ebp
 804934d:	3b 6c 24 08          	cmp    0x8(%esp),%ebp
 8049351:	74 09                	je     804935c <rio_readlineb+0x9f>
 8049353:	eb c4                	jmp    8049319 <rio_readlineb+0x5c>
 8049355:	bd 01 00 00 00       	mov    $0x1,%ebp
 804935a:	eb 04                	jmp    8049360 <rio_readlineb+0xa3>
 804935c:	8b 6c 24 0c          	mov    0xc(%esp),%ebp
 8049360:	c6 07 00             	movb   $0x0,(%edi)
 8049363:	89 e8                	mov    %ebp,%eax
 8049365:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 8049369:	65 33 15 14 00 00 00 	xor    %gs:0x14,%edx
 8049370:	74 17                	je     8049389 <rio_readlineb+0xcc>
 8049372:	eb 10                	jmp    8049384 <rio_readlineb+0xc7>
 8049374:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049379:	85 c0                	test   %eax,%eax
 804937b:	74 c6                	je     8049343 <rio_readlineb+0x86>
 804937d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049382:	eb e1                	jmp    8049365 <rio_readlineb+0xa8>
 8049384:	e8 07 f4 ff ff       	call   8048790 <__stack_chk_fail@plt>
 8049389:	83 c4 2c             	add    $0x2c,%esp
 804938c:	5b                   	pop    %ebx
 804938d:	5e                   	pop    %esi
 804938e:	5f                   	pop    %edi
 804938f:	5d                   	pop    %ebp
 8049390:	c3                   	ret    

08049391 <submitr>:
 8049391:	55                   	push   %ebp
 8049392:	57                   	push   %edi
 8049393:	56                   	push   %esi
 8049394:	53                   	push   %ebx
 8049395:	81 ec 60 a0 00 00    	sub    $0xa060,%esp
 804939b:	8b b4 24 74 a0 00 00 	mov    0xa074(%esp),%esi
 80493a2:	8b 84 24 7c a0 00 00 	mov    0xa07c(%esp),%eax
 80493a9:	89 44 24 10          	mov    %eax,0x10(%esp)
 80493ad:	8b 84 24 80 a0 00 00 	mov    0xa080(%esp),%eax
 80493b4:	89 44 24 14          	mov    %eax,0x14(%esp)
 80493b8:	8b 84 24 84 a0 00 00 	mov    0xa084(%esp),%eax
 80493bf:	89 44 24 18          	mov    %eax,0x18(%esp)
 80493c3:	8b 9c 24 88 a0 00 00 	mov    0xa088(%esp),%ebx
 80493ca:	8b 84 24 8c a0 00 00 	mov    0xa08c(%esp),%eax
 80493d1:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 80493d5:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 80493db:	89 84 24 50 a0 00 00 	mov    %eax,0xa050(%esp)
 80493e2:	31 c0                	xor    %eax,%eax
 80493e4:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%esp)
 80493eb:	00 
 80493ec:	6a 00                	push   $0x0
 80493ee:	6a 01                	push   $0x1
 80493f0:	6a 02                	push   $0x2
 80493f2:	e8 59 f4 ff ff       	call   8048850 <socket@plt>
 80493f7:	89 44 24 18          	mov    %eax,0x18(%esp)
 80493fb:	83 c4 10             	add    $0x10,%esp
 80493fe:	85 c0                	test   %eax,%eax
 8049400:	79 52                	jns    8049454 <submitr+0xc3>
 8049402:	8b 44 24 18          	mov    0x18(%esp),%eax
 8049406:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 804940c:	c7 40 04 72 3a 20 43 	movl   $0x43203a72,0x4(%eax)
 8049413:	c7 40 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%eax)
 804941a:	c7 40 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%eax)
 8049421:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 8049428:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 804942f:	c7 40 18 63 72 65 61 	movl   $0x61657263,0x18(%eax)
 8049436:	c7 40 1c 74 65 20 73 	movl   $0x73206574,0x1c(%eax)
 804943d:	c7 40 20 6f 63 6b 65 	movl   $0x656b636f,0x20(%eax)
 8049444:	66 c7 40 24 74 00    	movw   $0x74,0x24(%eax)
 804944a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 804944f:	e9 3f 06 00 00       	jmp    8049a93 <submitr+0x702>
 8049454:	83 ec 0c             	sub    $0xc,%esp
 8049457:	56                   	push   %esi
 8049458:	e8 13 f4 ff ff       	call   8048870 <gethostbyname@plt>
 804945d:	83 c4 10             	add    $0x10,%esp
 8049460:	85 c0                	test   %eax,%eax
 8049462:	75 73                	jne    80494d7 <submitr+0x146>
 8049464:	8b 44 24 18          	mov    0x18(%esp),%eax
 8049468:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 804946e:	c7 40 04 72 3a 20 44 	movl   $0x44203a72,0x4(%eax)
 8049475:	c7 40 08 4e 53 20 69 	movl   $0x6920534e,0x8(%eax)
 804947c:	c7 40 0c 73 20 75 6e 	movl   $0x6e752073,0xc(%eax)
 8049483:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 804948a:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 8049491:	c7 40 18 72 65 73 6f 	movl   $0x6f736572,0x18(%eax)
 8049498:	c7 40 1c 6c 76 65 20 	movl   $0x2065766c,0x1c(%eax)
 804949f:	c7 40 20 73 65 72 76 	movl   $0x76726573,0x20(%eax)
 80494a6:	c7 40 24 65 72 20 61 	movl   $0x61207265,0x24(%eax)
 80494ad:	c7 40 28 64 64 72 65 	movl   $0x65726464,0x28(%eax)
 80494b4:	66 c7 40 2c 73 73    	movw   $0x7373,0x2c(%eax)
 80494ba:	c6 40 2e 00          	movb   $0x0,0x2e(%eax)
 80494be:	83 ec 0c             	sub    $0xc,%esp
 80494c1:	ff 74 24 14          	pushl  0x14(%esp)
 80494c5:	e8 d6 f3 ff ff       	call   80488a0 <close@plt>
 80494ca:	83 c4 10             	add    $0x10,%esp
 80494cd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80494d2:	e9 bc 05 00 00       	jmp    8049a93 <submitr+0x702>
 80494d7:	8d 74 24 30          	lea    0x30(%esp),%esi
 80494db:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%esp)
 80494e2:	00 
 80494e3:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%esp)
 80494ea:	00 
 80494eb:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%esp)
 80494f2:	00 
 80494f3:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%esp)
 80494fa:	00 
 80494fb:	66 c7 44 24 30 02 00 	movw   $0x2,0x30(%esp)
 8049502:	6a 0c                	push   $0xc
 8049504:	ff 70 0c             	pushl  0xc(%eax)
 8049507:	8b 40 10             	mov    0x10(%eax),%eax
 804950a:	ff 30                	pushl  (%eax)
 804950c:	8d 44 24 40          	lea    0x40(%esp),%eax
 8049510:	50                   	push   %eax
 8049511:	e8 ba f2 ff ff       	call   80487d0 <__memmove_chk@plt>
 8049516:	0f b7 84 24 84 a0 00 	movzwl 0xa084(%esp),%eax
 804951d:	00 
 804951e:	66 c1 c8 08          	ror    $0x8,%ax
 8049522:	66 89 44 24 42       	mov    %ax,0x42(%esp)
 8049527:	83 c4 0c             	add    $0xc,%esp
 804952a:	6a 10                	push   $0x10
 804952c:	56                   	push   %esi
 804952d:	ff 74 24 14          	pushl  0x14(%esp)
 8049531:	e8 5a f3 ff ff       	call   8048890 <connect@plt>
 8049536:	83 c4 10             	add    $0x10,%esp
 8049539:	85 c0                	test   %eax,%eax
 804953b:	79 65                	jns    80495a2 <submitr+0x211>
 804953d:	8b 44 24 18          	mov    0x18(%esp),%eax
 8049541:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 8049547:	c7 40 04 72 3a 20 55 	movl   $0x55203a72,0x4(%eax)
 804954e:	c7 40 08 6e 61 62 6c 	movl   $0x6c62616e,0x8(%eax)
 8049555:	c7 40 0c 65 20 74 6f 	movl   $0x6f742065,0xc(%eax)
 804955c:	c7 40 10 20 63 6f 6e 	movl   $0x6e6f6320,0x10(%eax)
 8049563:	c7 40 14 6e 65 63 74 	movl   $0x7463656e,0x14(%eax)
 804956a:	c7 40 18 20 74 6f 20 	movl   $0x206f7420,0x18(%eax)
 8049571:	c7 40 1c 74 68 65 20 	movl   $0x20656874,0x1c(%eax)
 8049578:	c7 40 20 73 65 72 76 	movl   $0x76726573,0x20(%eax)
 804957f:	66 c7 40 24 65 72    	movw   $0x7265,0x24(%eax)
 8049585:	c6 40 26 00          	movb   $0x0,0x26(%eax)
 8049589:	83 ec 0c             	sub    $0xc,%esp
 804958c:	ff 74 24 14          	pushl  0x14(%esp)
 8049590:	e8 0b f3 ff ff       	call   80488a0 <close@plt>
 8049595:	83 c4 10             	add    $0x10,%esp
 8049598:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 804959d:	e9 f1 04 00 00       	jmp    8049a93 <submitr+0x702>
 80495a2:	be ff ff ff ff       	mov    $0xffffffff,%esi
 80495a7:	b8 00 00 00 00       	mov    $0x0,%eax
 80495ac:	89 f1                	mov    %esi,%ecx
 80495ae:	89 df                	mov    %ebx,%edi
 80495b0:	f2 ae                	repnz scas %es:(%edi),%al
 80495b2:	f7 d1                	not    %ecx
 80495b4:	89 cd                	mov    %ecx,%ebp
 80495b6:	89 f1                	mov    %esi,%ecx
 80495b8:	8b 7c 24 0c          	mov    0xc(%esp),%edi
 80495bc:	f2 ae                	repnz scas %es:(%edi),%al
 80495be:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
 80495c2:	89 f1                	mov    %esi,%ecx
 80495c4:	8b 7c 24 10          	mov    0x10(%esp),%edi
 80495c8:	f2 ae                	repnz scas %es:(%edi),%al
 80495ca:	89 ca                	mov    %ecx,%edx
 80495cc:	f7 d2                	not    %edx
 80495ce:	89 f1                	mov    %esi,%ecx
 80495d0:	8b 7c 24 14          	mov    0x14(%esp),%edi
 80495d4:	f2 ae                	repnz scas %es:(%edi),%al
 80495d6:	2b 54 24 1c          	sub    0x1c(%esp),%edx
 80495da:	29 ca                	sub    %ecx,%edx
 80495dc:	8d 44 6d fd          	lea    -0x3(%ebp,%ebp,2),%eax
 80495e0:	8d 44 02 7b          	lea    0x7b(%edx,%eax,1),%eax
 80495e4:	3d 00 20 00 00       	cmp    $0x2000,%eax
 80495e9:	76 7e                	jbe    8049669 <submitr+0x2d8>
 80495eb:	8b 44 24 18          	mov    0x18(%esp),%eax
 80495ef:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 80495f5:	c7 40 04 72 3a 20 52 	movl   $0x52203a72,0x4(%eax)
 80495fc:	c7 40 08 65 73 75 6c 	movl   $0x6c757365,0x8(%eax)
 8049603:	c7 40 0c 74 20 73 74 	movl   $0x74732074,0xc(%eax)
 804960a:	c7 40 10 72 69 6e 67 	movl   $0x676e6972,0x10(%eax)
 8049611:	c7 40 14 20 74 6f 6f 	movl   $0x6f6f7420,0x14(%eax)
 8049618:	c7 40 18 20 6c 61 72 	movl   $0x72616c20,0x18(%eax)
 804961f:	c7 40 1c 67 65 2e 20 	movl   $0x202e6567,0x1c(%eax)
 8049626:	c7 40 20 49 6e 63 72 	movl   $0x72636e49,0x20(%eax)
 804962d:	c7 40 24 65 61 73 65 	movl   $0x65736165,0x24(%eax)
 8049634:	c7 40 28 20 53 55 42 	movl   $0x42555320,0x28(%eax)
 804963b:	c7 40 2c 4d 49 54 52 	movl   $0x5254494d,0x2c(%eax)
 8049642:	c7 40 30 5f 4d 41 58 	movl   $0x58414d5f,0x30(%eax)
 8049649:	c7 40 34 42 55 46 00 	movl   $0x465542,0x34(%eax)
 8049650:	83 ec 0c             	sub    $0xc,%esp
 8049653:	ff 74 24 14          	pushl  0x14(%esp)
 8049657:	e8 44 f2 ff ff       	call   80488a0 <close@plt>
 804965c:	83 c4 10             	add    $0x10,%esp
 804965f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049664:	e9 2a 04 00 00       	jmp    8049a93 <submitr+0x702>
 8049669:	8d 94 24 4c 40 00 00 	lea    0x404c(%esp),%edx
 8049670:	b9 00 08 00 00       	mov    $0x800,%ecx
 8049675:	b8 00 00 00 00       	mov    $0x0,%eax
 804967a:	89 d7                	mov    %edx,%edi
 804967c:	f3 ab                	rep stos %eax,%es:(%edi)
 804967e:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8049683:	89 df                	mov    %ebx,%edi
 8049685:	f2 ae                	repnz scas %es:(%edi),%al
 8049687:	f7 d1                	not    %ecx
 8049689:	89 ce                	mov    %ecx,%esi
 804968b:	83 ee 01             	sub    $0x1,%esi
 804968e:	0f 84 5c 04 00 00    	je     8049af0 <submitr+0x75f>
 8049694:	89 d5                	mov    %edx,%ebp
 8049696:	bf d9 ff 00 00       	mov    $0xffd9,%edi
 804969b:	0f b6 13             	movzbl (%ebx),%edx
 804969e:	8d 4a d6             	lea    -0x2a(%edx),%ecx
 80496a1:	b8 01 00 00 00       	mov    $0x1,%eax
 80496a6:	80 f9 0f             	cmp    $0xf,%cl
 80496a9:	77 0a                	ja     80496b5 <submitr+0x324>
 80496ab:	89 f8                	mov    %edi,%eax
 80496ad:	d3 e8                	shr    %cl,%eax
 80496af:	83 f0 01             	xor    $0x1,%eax
 80496b2:	83 e0 01             	and    $0x1,%eax
 80496b5:	80 fa 5f             	cmp    $0x5f,%dl
 80496b8:	0f 94 c1             	sete   %cl
 80496bb:	38 c1                	cmp    %al,%cl
 80496bd:	73 0c                	jae    80496cb <submitr+0x33a>
 80496bf:	89 d0                	mov    %edx,%eax
 80496c1:	83 e0 df             	and    $0xffffffdf,%eax
 80496c4:	83 e8 41             	sub    $0x41,%eax
 80496c7:	3c 19                	cmp    $0x19,%al
 80496c9:	77 08                	ja     80496d3 <submitr+0x342>
 80496cb:	88 55 00             	mov    %dl,0x0(%ebp)
 80496ce:	8d 6d 01             	lea    0x1(%ebp),%ebp
 80496d1:	eb 62                	jmp    8049735 <submitr+0x3a4>
 80496d3:	80 fa 20             	cmp    $0x20,%dl
 80496d6:	75 09                	jne    80496e1 <submitr+0x350>
 80496d8:	c6 45 00 2b          	movb   $0x2b,0x0(%ebp)
 80496dc:	8d 6d 01             	lea    0x1(%ebp),%ebp
 80496df:	eb 54                	jmp    8049735 <submitr+0x3a4>
 80496e1:	8d 42 e0             	lea    -0x20(%edx),%eax
 80496e4:	3c 5f                	cmp    $0x5f,%al
 80496e6:	76 09                	jbe    80496f1 <submitr+0x360>
 80496e8:	80 fa 09             	cmp    $0x9,%dl
 80496eb:	0f 85 bb 03 00 00    	jne    8049aac <submitr+0x71b>
 80496f1:	83 ec 0c             	sub    $0xc,%esp
 80496f4:	0f b6 d2             	movzbl %dl,%edx
 80496f7:	52                   	push   %edx
 80496f8:	68 34 a3 04 08       	push   $0x804a334
 80496fd:	6a 08                	push   $0x8
 80496ff:	6a 01                	push   $0x1
 8049701:	8d 84 24 68 80 00 00 	lea    0x8068(%esp),%eax
 8049708:	50                   	push   %eax
 8049709:	e8 b2 f1 ff ff       	call   80488c0 <__sprintf_chk@plt>
 804970e:	0f b6 84 24 6c 80 00 	movzbl 0x806c(%esp),%eax
 8049715:	00 
 8049716:	88 45 00             	mov    %al,0x0(%ebp)
 8049719:	0f b6 84 24 6d 80 00 	movzbl 0x806d(%esp),%eax
 8049720:	00 
 8049721:	88 45 01             	mov    %al,0x1(%ebp)
 8049724:	0f b6 84 24 6e 80 00 	movzbl 0x806e(%esp),%eax
 804972b:	00 
 804972c:	88 45 02             	mov    %al,0x2(%ebp)
 804972f:	83 c4 20             	add    $0x20,%esp
 8049732:	8d 6d 03             	lea    0x3(%ebp),%ebp
 8049735:	83 c3 01             	add    $0x1,%ebx
 8049738:	83 ee 01             	sub    $0x1,%esi
 804973b:	0f 85 5a ff ff ff    	jne    804969b <submitr+0x30a>
 8049741:	e9 aa 03 00 00       	jmp    8049af0 <submitr+0x75f>
 8049746:	83 ec 04             	sub    $0x4,%esp
 8049749:	53                   	push   %ebx
 804974a:	56                   	push   %esi
 804974b:	55                   	push   %ebp
 804974c:	e8 af f0 ff ff       	call   8048800 <write@plt>
 8049751:	83 c4 10             	add    $0x10,%esp
 8049754:	85 c0                	test   %eax,%eax
 8049756:	7f 0f                	jg     8049767 <submitr+0x3d6>
 8049758:	e8 d3 f0 ff ff       	call   8048830 <__errno_location@plt>
 804975d:	83 38 04             	cmpl   $0x4,(%eax)
 8049760:	75 0f                	jne    8049771 <submitr+0x3e0>
 8049762:	b8 00 00 00 00       	mov    $0x0,%eax
 8049767:	01 c6                	add    %eax,%esi
 8049769:	29 c3                	sub    %eax,%ebx
 804976b:	75 d9                	jne    8049746 <submitr+0x3b5>
 804976d:	85 ff                	test   %edi,%edi
 804976f:	79 69                	jns    80497da <submitr+0x449>
 8049771:	8b 44 24 18          	mov    0x18(%esp),%eax
 8049775:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 804977b:	c7 40 04 72 3a 20 43 	movl   $0x43203a72,0x4(%eax)
 8049782:	c7 40 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%eax)
 8049789:	c7 40 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%eax)
 8049790:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 8049797:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 804979e:	c7 40 18 77 72 69 74 	movl   $0x74697277,0x18(%eax)
 80497a5:	c7 40 1c 65 20 74 6f 	movl   $0x6f742065,0x1c(%eax)
 80497ac:	c7 40 20 20 74 68 65 	movl   $0x65687420,0x20(%eax)
 80497b3:	c7 40 24 20 73 65 72 	movl   $0x72657320,0x24(%eax)
 80497ba:	c7 40 28 76 65 72 00 	movl   $0x726576,0x28(%eax)
 80497c1:	83 ec 0c             	sub    $0xc,%esp
 80497c4:	ff 74 24 14          	pushl  0x14(%esp)
 80497c8:	e8 d3 f0 ff ff       	call   80488a0 <close@plt>
 80497cd:	83 c4 10             	add    $0x10,%esp
 80497d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80497d5:	e9 b9 02 00 00       	jmp    8049a93 <submitr+0x702>
 80497da:	8b 44 24 08          	mov    0x8(%esp),%eax
 80497de:	89 44 24 40          	mov    %eax,0x40(%esp)
 80497e2:	c7 44 24 44 00 00 00 	movl   $0x0,0x44(%esp)
 80497e9:	00 
 80497ea:	8d 44 24 4c          	lea    0x4c(%esp),%eax
 80497ee:	89 44 24 48          	mov    %eax,0x48(%esp)
 80497f2:	b9 00 20 00 00       	mov    $0x2000,%ecx
 80497f7:	8d 94 24 4c 20 00 00 	lea    0x204c(%esp),%edx
 80497fe:	8d 44 24 40          	lea    0x40(%esp),%eax
 8049802:	e8 b6 fa ff ff       	call   80492bd <rio_readlineb>
 8049807:	85 c0                	test   %eax,%eax
 8049809:	7f 7d                	jg     8049888 <submitr+0x4f7>
 804980b:	8b 44 24 18          	mov    0x18(%esp),%eax
 804980f:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 8049815:	c7 40 04 72 3a 20 43 	movl   $0x43203a72,0x4(%eax)
 804981c:	c7 40 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%eax)
 8049823:	c7 40 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%eax)
 804982a:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 8049831:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 8049838:	c7 40 18 72 65 61 64 	movl   $0x64616572,0x18(%eax)
 804983f:	c7 40 1c 20 66 69 72 	movl   $0x72696620,0x1c(%eax)
 8049846:	c7 40 20 73 74 20 68 	movl   $0x68207473,0x20(%eax)
 804984d:	c7 40 24 65 61 64 65 	movl   $0x65646165,0x24(%eax)
 8049854:	c7 40 28 72 20 66 72 	movl   $0x72662072,0x28(%eax)
 804985b:	c7 40 2c 6f 6d 20 73 	movl   $0x73206d6f,0x2c(%eax)
 8049862:	c7 40 30 65 72 76 65 	movl   $0x65767265,0x30(%eax)
 8049869:	66 c7 40 34 72 00    	movw   $0x72,0x34(%eax)
 804986f:	83 ec 0c             	sub    $0xc,%esp
 8049872:	ff 74 24 14          	pushl  0x14(%esp)
 8049876:	e8 25 f0 ff ff       	call   80488a0 <close@plt>
 804987b:	83 c4 10             	add    $0x10,%esp
 804987e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049883:	e9 0b 02 00 00       	jmp    8049a93 <submitr+0x702>
 8049888:	83 ec 0c             	sub    $0xc,%esp
 804988b:	8d 84 24 58 80 00 00 	lea    0x8058(%esp),%eax
 8049892:	50                   	push   %eax
 8049893:	8d 44 24 3c          	lea    0x3c(%esp),%eax
 8049897:	50                   	push   %eax
 8049898:	8d 84 24 60 60 00 00 	lea    0x6060(%esp),%eax
 804989f:	50                   	push   %eax
 80498a0:	68 3b a3 04 08       	push   $0x804a33b
 80498a5:	8d 84 24 68 20 00 00 	lea    0x2068(%esp),%eax
 80498ac:	50                   	push   %eax
 80498ad:	e8 5e ef ff ff       	call   8048810 <__isoc99_sscanf@plt>
 80498b2:	8b 44 24 4c          	mov    0x4c(%esp),%eax
 80498b6:	83 c4 20             	add    $0x20,%esp
 80498b9:	3d c8 00 00 00       	cmp    $0xc8,%eax
 80498be:	0f 84 c4 00 00 00    	je     8049988 <submitr+0x5f7>
 80498c4:	83 ec 08             	sub    $0x8,%esp
 80498c7:	8d 94 24 54 80 00 00 	lea    0x8054(%esp),%edx
 80498ce:	52                   	push   %edx
 80498cf:	50                   	push   %eax
 80498d0:	68 4c a2 04 08       	push   $0x804a24c
 80498d5:	6a ff                	push   $0xffffffff
 80498d7:	6a 01                	push   $0x1
 80498d9:	ff 74 24 34          	pushl  0x34(%esp)
 80498dd:	e8 de ef ff ff       	call   80488c0 <__sprintf_chk@plt>
 80498e2:	83 c4 14             	add    $0x14,%esp
 80498e5:	ff 74 24 14          	pushl  0x14(%esp)
 80498e9:	e8 b2 ef ff ff       	call   80488a0 <close@plt>
 80498ee:	83 c4 10             	add    $0x10,%esp
 80498f1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80498f6:	e9 98 01 00 00       	jmp    8049a93 <submitr+0x702>
 80498fb:	b9 00 20 00 00       	mov    $0x2000,%ecx
 8049900:	8d 94 24 4c 20 00 00 	lea    0x204c(%esp),%edx
 8049907:	8d 44 24 40          	lea    0x40(%esp),%eax
 804990b:	e8 ad f9 ff ff       	call   80492bd <rio_readlineb>
 8049910:	85 c0                	test   %eax,%eax
 8049912:	7f 74                	jg     8049988 <submitr+0x5f7>
 8049914:	8b 44 24 18          	mov    0x18(%esp),%eax
 8049918:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 804991e:	c7 40 04 72 3a 20 43 	movl   $0x43203a72,0x4(%eax)
 8049925:	c7 40 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%eax)
 804992c:	c7 40 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%eax)
 8049933:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 804993a:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 8049941:	c7 40 18 72 65 61 64 	movl   $0x64616572,0x18(%eax)
 8049948:	c7 40 1c 20 68 65 61 	movl   $0x61656820,0x1c(%eax)
 804994f:	c7 40 20 64 65 72 73 	movl   $0x73726564,0x20(%eax)
 8049956:	c7 40 24 20 66 72 6f 	movl   $0x6f726620,0x24(%eax)
 804995d:	c7 40 28 6d 20 73 65 	movl   $0x6573206d,0x28(%eax)
 8049964:	c7 40 2c 72 76 65 72 	movl   $0x72657672,0x2c(%eax)
 804996b:	c6 40 30 00          	movb   $0x0,0x30(%eax)
 804996f:	83 ec 0c             	sub    $0xc,%esp
 8049972:	ff 74 24 14          	pushl  0x14(%esp)
 8049976:	e8 25 ef ff ff       	call   80488a0 <close@plt>
 804997b:	83 c4 10             	add    $0x10,%esp
 804997e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049983:	e9 0b 01 00 00       	jmp    8049a93 <submitr+0x702>
 8049988:	80 bc 24 4c 20 00 00 	cmpb   $0xd,0x204c(%esp)
 804998f:	0d 
 8049990:	0f 85 65 ff ff ff    	jne    80498fb <submitr+0x56a>
 8049996:	80 bc 24 4d 20 00 00 	cmpb   $0xa,0x204d(%esp)
 804999d:	0a 
 804999e:	0f 85 57 ff ff ff    	jne    80498fb <submitr+0x56a>
 80499a4:	80 bc 24 4e 20 00 00 	cmpb   $0x0,0x204e(%esp)
 80499ab:	00 
 80499ac:	0f 85 49 ff ff ff    	jne    80498fb <submitr+0x56a>
 80499b2:	b9 00 20 00 00       	mov    $0x2000,%ecx
 80499b7:	8d 94 24 4c 20 00 00 	lea    0x204c(%esp),%edx
 80499be:	8d 44 24 40          	lea    0x40(%esp),%eax
 80499c2:	e8 f6 f8 ff ff       	call   80492bd <rio_readlineb>
 80499c7:	85 c0                	test   %eax,%eax
 80499c9:	7f 7b                	jg     8049a46 <submitr+0x6b5>
 80499cb:	8b 44 24 18          	mov    0x18(%esp),%eax
 80499cf:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 80499d5:	c7 40 04 72 3a 20 43 	movl   $0x43203a72,0x4(%eax)
 80499dc:	c7 40 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%eax)
 80499e3:	c7 40 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%eax)
 80499ea:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 80499f1:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 80499f8:	c7 40 18 72 65 61 64 	movl   $0x64616572,0x18(%eax)
 80499ff:	c7 40 1c 20 73 74 61 	movl   $0x61747320,0x1c(%eax)
 8049a06:	c7 40 20 74 75 73 20 	movl   $0x20737574,0x20(%eax)
 8049a0d:	c7 40 24 6d 65 73 73 	movl   $0x7373656d,0x24(%eax)
 8049a14:	c7 40 28 61 67 65 20 	movl   $0x20656761,0x28(%eax)
 8049a1b:	c7 40 2c 66 72 6f 6d 	movl   $0x6d6f7266,0x2c(%eax)
 8049a22:	c7 40 30 20 73 65 72 	movl   $0x72657320,0x30(%eax)
 8049a29:	c7 40 34 76 65 72 00 	movl   $0x726576,0x34(%eax)
 8049a30:	83 ec 0c             	sub    $0xc,%esp
 8049a33:	ff 74 24 14          	pushl  0x14(%esp)
 8049a37:	e8 64 ee ff ff       	call   80488a0 <close@plt>
 8049a3c:	83 c4 10             	add    $0x10,%esp
 8049a3f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049a44:	eb 4d                	jmp    8049a93 <submitr+0x702>
 8049a46:	83 ec 08             	sub    $0x8,%esp
 8049a49:	8d 84 24 54 20 00 00 	lea    0x2054(%esp),%eax
 8049a50:	50                   	push   %eax
 8049a51:	8b 7c 24 24          	mov    0x24(%esp),%edi
 8049a55:	57                   	push   %edi
 8049a56:	e8 45 ed ff ff       	call   80487a0 <strcpy@plt>
 8049a5b:	83 c4 04             	add    $0x4,%esp
 8049a5e:	ff 74 24 14          	pushl  0x14(%esp)
 8049a62:	e8 39 ee ff ff       	call   80488a0 <close@plt>
 8049a67:	0f b6 17             	movzbl (%edi),%edx
 8049a6a:	b8 4f 00 00 00       	mov    $0x4f,%eax
 8049a6f:	83 c4 10             	add    $0x10,%esp
 8049a72:	29 d0                	sub    %edx,%eax
 8049a74:	75 13                	jne    8049a89 <submitr+0x6f8>
 8049a76:	0f b6 57 01          	movzbl 0x1(%edi),%edx
 8049a7a:	b8 4b 00 00 00       	mov    $0x4b,%eax
 8049a7f:	29 d0                	sub    %edx,%eax
 8049a81:	75 06                	jne    8049a89 <submitr+0x6f8>
 8049a83:	0f b6 47 02          	movzbl 0x2(%edi),%eax
 8049a87:	f7 d8                	neg    %eax
 8049a89:	85 c0                	test   %eax,%eax
 8049a8b:	0f 95 c0             	setne  %al
 8049a8e:	0f b6 c0             	movzbl %al,%eax
 8049a91:	f7 d8                	neg    %eax
 8049a93:	8b bc 24 4c a0 00 00 	mov    0xa04c(%esp),%edi
 8049a9a:	65 33 3d 14 00 00 00 	xor    %gs:0x14,%edi
 8049aa1:	0f 84 a9 00 00 00    	je     8049b50 <submitr+0x7bf>
 8049aa7:	e9 9f 00 00 00       	jmp    8049b4b <submitr+0x7ba>
 8049aac:	a1 7c a2 04 08       	mov    0x804a27c,%eax
 8049ab1:	8b 7c 24 18          	mov    0x18(%esp),%edi
 8049ab5:	89 07                	mov    %eax,(%edi)
 8049ab7:	a1 bb a2 04 08       	mov    0x804a2bb,%eax
 8049abc:	89 47 3f             	mov    %eax,0x3f(%edi)
 8049abf:	89 f8                	mov    %edi,%eax
 8049ac1:	83 c7 04             	add    $0x4,%edi
 8049ac4:	83 e7 fc             	and    $0xfffffffc,%edi
 8049ac7:	29 f8                	sub    %edi,%eax
 8049ac9:	be 7c a2 04 08       	mov    $0x804a27c,%esi
 8049ace:	29 c6                	sub    %eax,%esi
 8049ad0:	83 c0 43             	add    $0x43,%eax
 8049ad3:	c1 e8 02             	shr    $0x2,%eax
 8049ad6:	89 c1                	mov    %eax,%ecx
 8049ad8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
 8049ada:	83 ec 0c             	sub    $0xc,%esp
 8049add:	ff 74 24 14          	pushl  0x14(%esp)
 8049ae1:	e8 ba ed ff ff       	call   80488a0 <close@plt>
 8049ae6:	83 c4 10             	add    $0x10,%esp
 8049ae9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049aee:	eb a3                	jmp    8049a93 <submitr+0x702>
 8049af0:	8d 84 24 4c 40 00 00 	lea    0x404c(%esp),%eax
 8049af7:	50                   	push   %eax
 8049af8:	ff 74 24 18          	pushl  0x18(%esp)
 8049afc:	ff 74 24 18          	pushl  0x18(%esp)
 8049b00:	ff 74 24 18          	pushl  0x18(%esp)
 8049b04:	68 c0 a2 04 08       	push   $0x804a2c0
 8049b09:	68 00 20 00 00       	push   $0x2000
 8049b0e:	6a 01                	push   $0x1
 8049b10:	8d bc 24 68 20 00 00 	lea    0x2068(%esp),%edi
 8049b17:	57                   	push   %edi
 8049b18:	e8 a3 ed ff ff       	call   80488c0 <__sprintf_chk@plt>
 8049b1d:	b8 00 00 00 00       	mov    $0x0,%eax
 8049b22:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8049b27:	f2 ae                	repnz scas %es:(%edi),%al
 8049b29:	f7 d1                	not    %ecx
 8049b2b:	8d 79 ff             	lea    -0x1(%ecx),%edi
 8049b2e:	83 c4 20             	add    $0x20,%esp
 8049b31:	89 fb                	mov    %edi,%ebx
 8049b33:	8d b4 24 4c 20 00 00 	lea    0x204c(%esp),%esi
 8049b3a:	8b 6c 24 08          	mov    0x8(%esp),%ebp
 8049b3e:	85 ff                	test   %edi,%edi
 8049b40:	0f 85 00 fc ff ff    	jne    8049746 <submitr+0x3b5>
 8049b46:	e9 8f fc ff ff       	jmp    80497da <submitr+0x449>
 8049b4b:	e8 40 ec ff ff       	call   8048790 <__stack_chk_fail@plt>
 8049b50:	81 c4 5c a0 00 00    	add    $0xa05c,%esp
 8049b56:	5b                   	pop    %ebx
 8049b57:	5e                   	pop    %esi
 8049b58:	5f                   	pop    %edi
 8049b59:	5d                   	pop    %ebp
 8049b5a:	c3                   	ret    

08049b5b <init_timeout>:
 8049b5b:	53                   	push   %ebx
 8049b5c:	83 ec 08             	sub    $0x8,%esp
 8049b5f:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 8049b63:	85 db                	test   %ebx,%ebx
 8049b65:	74 24                	je     8049b8b <init_timeout+0x30>
 8049b67:	83 ec 08             	sub    $0x8,%esp
 8049b6a:	68 9a 92 04 08       	push   $0x804929a
 8049b6f:	6a 0e                	push   $0xe
 8049b71:	e8 ea eb ff ff       	call   8048760 <signal@plt>
 8049b76:	85 db                	test   %ebx,%ebx
 8049b78:	b8 00 00 00 00       	mov    $0x0,%eax
 8049b7d:	0f 48 d8             	cmovs  %eax,%ebx
 8049b80:	89 1c 24             	mov    %ebx,(%esp)
 8049b83:	e8 f8 eb ff ff       	call   8048780 <alarm@plt>
 8049b88:	83 c4 10             	add    $0x10,%esp
 8049b8b:	83 c4 08             	add    $0x8,%esp
 8049b8e:	5b                   	pop    %ebx
 8049b8f:	c3                   	ret    

08049b90 <init_driver>:
 8049b90:	57                   	push   %edi
 8049b91:	56                   	push   %esi
 8049b92:	53                   	push   %ebx
 8049b93:	83 ec 28             	sub    $0x28,%esp
 8049b96:	8b 74 24 38          	mov    0x38(%esp),%esi
 8049b9a:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8049ba0:	89 44 24 24          	mov    %eax,0x24(%esp)
 8049ba4:	31 c0                	xor    %eax,%eax
 8049ba6:	6a 01                	push   $0x1
 8049ba8:	6a 0d                	push   $0xd
 8049baa:	e8 b1 eb ff ff       	call   8048760 <signal@plt>
 8049baf:	83 c4 08             	add    $0x8,%esp
 8049bb2:	6a 01                	push   $0x1
 8049bb4:	6a 1d                	push   $0x1d
 8049bb6:	e8 a5 eb ff ff       	call   8048760 <signal@plt>
 8049bbb:	83 c4 08             	add    $0x8,%esp
 8049bbe:	6a 01                	push   $0x1
 8049bc0:	6a 1d                	push   $0x1d
 8049bc2:	e8 99 eb ff ff       	call   8048760 <signal@plt>
 8049bc7:	83 c4 0c             	add    $0xc,%esp
 8049bca:	6a 00                	push   $0x0
 8049bcc:	6a 01                	push   $0x1
 8049bce:	6a 02                	push   $0x2
 8049bd0:	e8 7b ec ff ff       	call   8048850 <socket@plt>
 8049bd5:	83 c4 10             	add    $0x10,%esp
 8049bd8:	85 c0                	test   %eax,%eax
 8049bda:	79 4e                	jns    8049c2a <init_driver+0x9a>
 8049bdc:	c7 06 45 72 72 6f    	movl   $0x6f727245,(%esi)
 8049be2:	c7 46 04 72 3a 20 43 	movl   $0x43203a72,0x4(%esi)
 8049be9:	c7 46 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%esi)
 8049bf0:	c7 46 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%esi)
 8049bf7:	c7 46 10 61 62 6c 65 	movl   $0x656c6261,0x10(%esi)
 8049bfe:	c7 46 14 20 74 6f 20 	movl   $0x206f7420,0x14(%esi)
 8049c05:	c7 46 18 63 72 65 61 	movl   $0x61657263,0x18(%esi)
 8049c0c:	c7 46 1c 74 65 20 73 	movl   $0x73206574,0x1c(%esi)
 8049c13:	c7 46 20 6f 63 6b 65 	movl   $0x656b636f,0x20(%esi)
 8049c1a:	66 c7 46 24 74 00    	movw   $0x74,0x24(%esi)
 8049c20:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049c25:	e9 1f 01 00 00       	jmp    8049d49 <init_driver+0x1b9>
 8049c2a:	89 c3                	mov    %eax,%ebx
 8049c2c:	83 ec 0c             	sub    $0xc,%esp
 8049c2f:	68 4c a3 04 08       	push   $0x804a34c
 8049c34:	e8 37 ec ff ff       	call   8048870 <gethostbyname@plt>
 8049c39:	83 c4 10             	add    $0x10,%esp
 8049c3c:	85 c0                	test   %eax,%eax
 8049c3e:	75 6c                	jne    8049cac <init_driver+0x11c>
 8049c40:	c7 06 45 72 72 6f    	movl   $0x6f727245,(%esi)
 8049c46:	c7 46 04 72 3a 20 44 	movl   $0x44203a72,0x4(%esi)
 8049c4d:	c7 46 08 4e 53 20 69 	movl   $0x6920534e,0x8(%esi)
 8049c54:	c7 46 0c 73 20 75 6e 	movl   $0x6e752073,0xc(%esi)
 8049c5b:	c7 46 10 61 62 6c 65 	movl   $0x656c6261,0x10(%esi)
 8049c62:	c7 46 14 20 74 6f 20 	movl   $0x206f7420,0x14(%esi)
 8049c69:	c7 46 18 72 65 73 6f 	movl   $0x6f736572,0x18(%esi)
 8049c70:	c7 46 1c 6c 76 65 20 	movl   $0x2065766c,0x1c(%esi)
 8049c77:	c7 46 20 73 65 72 76 	movl   $0x76726573,0x20(%esi)
 8049c7e:	c7 46 24 65 72 20 61 	movl   $0x61207265,0x24(%esi)
 8049c85:	c7 46 28 64 64 72 65 	movl   $0x65726464,0x28(%esi)
 8049c8c:	66 c7 46 2c 73 73    	movw   $0x7373,0x2c(%esi)
 8049c92:	c6 46 2e 00          	movb   $0x0,0x2e(%esi)
 8049c96:	83 ec 0c             	sub    $0xc,%esp
 8049c99:	53                   	push   %ebx
 8049c9a:	e8 01 ec ff ff       	call   80488a0 <close@plt>
 8049c9f:	83 c4 10             	add    $0x10,%esp
 8049ca2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049ca7:	e9 9d 00 00 00       	jmp    8049d49 <init_driver+0x1b9>
 8049cac:	8d 7c 24 0c          	lea    0xc(%esp),%edi
 8049cb0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 8049cb7:	00 
 8049cb8:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8049cbf:	00 
 8049cc0:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 8049cc7:	00 
 8049cc8:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
 8049ccf:	00 
 8049cd0:	66 c7 44 24 0c 02 00 	movw   $0x2,0xc(%esp)
 8049cd7:	6a 0c                	push   $0xc
 8049cd9:	ff 70 0c             	pushl  0xc(%eax)
 8049cdc:	8b 40 10             	mov    0x10(%eax),%eax
 8049cdf:	ff 30                	pushl  (%eax)
 8049ce1:	8d 44 24 1c          	lea    0x1c(%esp),%eax
 8049ce5:	50                   	push   %eax
 8049ce6:	e8 e5 ea ff ff       	call   80487d0 <__memmove_chk@plt>
 8049ceb:	66 c7 44 24 1e 3b 6e 	movw   $0x6e3b,0x1e(%esp)
 8049cf2:	83 c4 0c             	add    $0xc,%esp
 8049cf5:	6a 10                	push   $0x10
 8049cf7:	57                   	push   %edi
 8049cf8:	53                   	push   %ebx
 8049cf9:	e8 92 eb ff ff       	call   8048890 <connect@plt>
 8049cfe:	83 c4 10             	add    $0x10,%esp
 8049d01:	85 c0                	test   %eax,%eax
 8049d03:	79 2a                	jns    8049d2f <init_driver+0x19f>
 8049d05:	83 ec 0c             	sub    $0xc,%esp
 8049d08:	68 4c a3 04 08       	push   $0x804a34c
 8049d0d:	68 0c a3 04 08       	push   $0x804a30c
 8049d12:	6a ff                	push   $0xffffffff
 8049d14:	6a 01                	push   $0x1
 8049d16:	56                   	push   %esi
 8049d17:	e8 a4 eb ff ff       	call   80488c0 <__sprintf_chk@plt>
 8049d1c:	83 c4 14             	add    $0x14,%esp
 8049d1f:	53                   	push   %ebx
 8049d20:	e8 7b eb ff ff       	call   80488a0 <close@plt>
 8049d25:	83 c4 10             	add    $0x10,%esp
 8049d28:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049d2d:	eb 1a                	jmp    8049d49 <init_driver+0x1b9>
 8049d2f:	83 ec 0c             	sub    $0xc,%esp
 8049d32:	53                   	push   %ebx
 8049d33:	e8 68 eb ff ff       	call   80488a0 <close@plt>
 8049d38:	66 c7 06 4f 4b       	movw   $0x4b4f,(%esi)
 8049d3d:	c6 46 02 00          	movb   $0x0,0x2(%esi)
 8049d41:	83 c4 10             	add    $0x10,%esp
 8049d44:	b8 00 00 00 00       	mov    $0x0,%eax
 8049d49:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 8049d4d:	65 33 15 14 00 00 00 	xor    %gs:0x14,%edx
 8049d54:	74 05                	je     8049d5b <init_driver+0x1cb>
 8049d56:	e8 35 ea ff ff       	call   8048790 <__stack_chk_fail@plt>
 8049d5b:	83 c4 20             	add    $0x20,%esp
 8049d5e:	5b                   	pop    %ebx
 8049d5f:	5e                   	pop    %esi
 8049d60:	5f                   	pop    %edi
 8049d61:	c3                   	ret    

08049d62 <driver_post>:
 8049d62:	53                   	push   %ebx
 8049d63:	83 ec 08             	sub    $0x8,%esp
 8049d66:	8b 44 24 10          	mov    0x10(%esp),%eax
 8049d6a:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 8049d6e:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
 8049d73:	74 26                	je     8049d9b <driver_post+0x39>
 8049d75:	83 ec 04             	sub    $0x4,%esp
 8049d78:	ff 74 24 18          	pushl  0x18(%esp)
 8049d7c:	68 5a a3 04 08       	push   $0x804a35a
 8049d81:	6a 01                	push   $0x1
 8049d83:	e8 b8 ea ff ff       	call   8048840 <__printf_chk@plt>
 8049d88:	66 c7 03 4f 4b       	movw   $0x4b4f,(%ebx)
 8049d8d:	c6 43 02 00          	movb   $0x0,0x2(%ebx)
 8049d91:	83 c4 10             	add    $0x10,%esp
 8049d94:	b8 00 00 00 00       	mov    $0x0,%eax
 8049d99:	eb 3e                	jmp    8049dd9 <driver_post+0x77>
 8049d9b:	85 c0                	test   %eax,%eax
 8049d9d:	74 2c                	je     8049dcb <driver_post+0x69>
 8049d9f:	80 38 00             	cmpb   $0x0,(%eax)
 8049da2:	74 27                	je     8049dcb <driver_post+0x69>
 8049da4:	83 ec 04             	sub    $0x4,%esp
 8049da7:	53                   	push   %ebx
 8049da8:	ff 74 24 1c          	pushl  0x1c(%esp)
 8049dac:	68 71 a3 04 08       	push   $0x804a371
 8049db1:	50                   	push   %eax
 8049db2:	68 79 a3 04 08       	push   $0x804a379
 8049db7:	68 6e 3b 00 00       	push   $0x3b6e
 8049dbc:	68 4c a3 04 08       	push   $0x804a34c
 8049dc1:	e8 cb f5 ff ff       	call   8049391 <submitr>
 8049dc6:	83 c4 20             	add    $0x20,%esp
 8049dc9:	eb 0e                	jmp    8049dd9 <driver_post+0x77>
 8049dcb:	66 c7 03 4f 4b       	movw   $0x4b4f,(%ebx)
 8049dd0:	c6 43 02 00          	movb   $0x0,0x2(%ebx)
 8049dd4:	b8 00 00 00 00       	mov    $0x0,%eax
 8049dd9:	83 c4 08             	add    $0x8,%esp
 8049ddc:	5b                   	pop    %ebx
 8049ddd:	c3                   	ret    
 8049dde:	66 90                	xchg   %ax,%ax

08049de0 <__libc_csu_init>:
 8049de0:	55                   	push   %ebp
 8049de1:	57                   	push   %edi
 8049de2:	56                   	push   %esi
 8049de3:	53                   	push   %ebx
 8049de4:	e8 27 eb ff ff       	call   8048910 <__x86.get_pc_thunk.bx>
 8049de9:	81 c3 17 22 00 00    	add    $0x2217,%ebx
 8049def:	83 ec 0c             	sub    $0xc,%esp
 8049df2:	8b 6c 24 20          	mov    0x20(%esp),%ebp
 8049df6:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 8049dfc:	e8 f3 e8 ff ff       	call   80486f4 <_init>
 8049e01:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 8049e07:	29 c6                	sub    %eax,%esi
 8049e09:	c1 fe 02             	sar    $0x2,%esi
 8049e0c:	85 f6                	test   %esi,%esi
 8049e0e:	74 25                	je     8049e35 <__libc_csu_init+0x55>
 8049e10:	31 ff                	xor    %edi,%edi
 8049e12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8049e18:	83 ec 04             	sub    $0x4,%esp
 8049e1b:	ff 74 24 2c          	pushl  0x2c(%esp)
 8049e1f:	ff 74 24 2c          	pushl  0x2c(%esp)
 8049e23:	55                   	push   %ebp
 8049e24:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 8049e2b:	83 c7 01             	add    $0x1,%edi
 8049e2e:	83 c4 10             	add    $0x10,%esp
 8049e31:	39 f7                	cmp    %esi,%edi
 8049e33:	75 e3                	jne    8049e18 <__libc_csu_init+0x38>
 8049e35:	83 c4 0c             	add    $0xc,%esp
 8049e38:	5b                   	pop    %ebx
 8049e39:	5e                   	pop    %esi
 8049e3a:	5f                   	pop    %edi
 8049e3b:	5d                   	pop    %ebp
 8049e3c:	c3                   	ret    
 8049e3d:	8d 76 00             	lea    0x0(%esi),%esi

08049e40 <__libc_csu_fini>:
 8049e40:	f3 c3                	repz ret 

Disassembly of section .fini:

08049e44 <_fini>:
 8049e44:	53                   	push   %ebx
 8049e45:	83 ec 08             	sub    $0x8,%esp
 8049e48:	e8 c3 ea ff ff       	call   8048910 <__x86.get_pc_thunk.bx>
 8049e4d:	81 c3 b3 21 00 00    	add    $0x21b3,%ebx
 8049e53:	83 c4 08             	add    $0x8,%esp
 8049e56:	5b                   	pop    %ebx
 8049e57:	c3                   	ret    